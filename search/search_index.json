{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the WebFramework documentation. WebFramework is a companion framework to use on top of the Slim Framework, designed to provide a cohesive set of services around database management, ORM, caching, authentication, middleware, templating, translations, instrumentation, and more.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#skeleton-application","title":"Skeleton Application","text":"<p>WebFramework is installed via Composer. You can install a skeleton application to get you started:</p> <pre><code>composer create-project avoutic/web-framework-skeleton\n</code></pre>"},{"location":"#existing-project","title":"Existing project","text":"<p>You can also add WebFramework to an existing project by installing it via Composer:</p> <pre><code>composer require avoutic/web-framework\n</code></pre> <p>You then probably want to add something like the following to your <code>composer.json</code> file, to make sure the core files are installed:</p> <pre><code>    \"scripts\": {\n        \"post-install-cmd\": [\n            \"php -r \\\"copy('vendor/avoutic/web-framework/htdocs/index.php', 'htdocs/index.php');\\\"\",\n            \"php -r \\\"copy('vendor/avoutic/web-framework/scripts/framework.php', 'framework');\\\"\"\n        ],\n        \"post-update-cmd\": [\n            \"php -r \\\"copy('vendor/avoutic/web-framework/htdocs/index.php', 'htdocs/index.php');\\\"\",\n            \"php -r \\\"copy('vendor/avoutic/web-framework/scripts/framework.php', 'framework');\\\"\"\n        ]\n    },\n</code></pre>"},{"location":"#directory-structure","title":"Directory Structure","text":"<p>Applications using WebFramework typically have the following directory structure:</p> <ul> <li>actions: Contains files for each endpoint and related API functions.</li> <li>config: Contains the configuration files for the application.</li> <li>definitions: Contains the PHP-DI definitions for the application.</li> <li>htdocs: The location for the core <code>index.php</code> and external static files like images, CSS, and JavaScript.</li> <li>migrations: Contains the database migrations for the application.</li> <li>scripts: Contains scripts for tasks, migrations, and other automation tasks.</li> <li>src: Contains the core application/business logic and model files.</li> <li>templates: Contains the templates used by the actions.</li> <li>tests: Contains the tests for the application.</li> <li>translations: Contains the translation files for the application.</li> </ul> <p>You are free to organize your project in any way you like, but the above structure is recommended. You will need to configure the PSR-4 autoloading in your <code>composer.json</code> file to match the directory structure. The skeleton uses the following configuration:</p> <pre><code>    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"src/\",\n            \"App\\\\Actions\\\\\": \"actions/\",\n            \"App\\\\Routes\\\\\": \"routes/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"WebFramework\\\\PHPStan\\\\\": \"vendor/avoutic/web-framework/phpstan/\"\n        }\n    },\n</code></pre>"},{"location":"#documentation-contents","title":"Documentation Contents","text":"<p>This documentation is organized into several sections, each focusing on a specific aspect of WebFramework. Click on the links below to explore each section in detail:</p> <ul> <li>Installation Guide: Instructions for installing WebFramework and setting up a base project.</li> <li>Migration Guide: Guidance on migrating between different versions of WebFramework.</li> <li>Configuration Management: How to manage and access configuration settings in your application.</li> <li>Dependency Injection: How to use and configure dependency injection in WebFramework.</li> <li>Database Usage: How to interact with the database, including executing queries and managing transactions.</li> <li>Database Migrations: How to manage database schema changes using the DatabaseManager.</li> <li>Entities and Repositories: Understanding the Entity and Repository pattern in WebFramework.</li> <li>Creating New Entities: Step-by-step guide to creating new entities and repositories.</li> <li>Input Validation: How to add input validation to your actions using the InputValidationService.</li> <li>Routing: How to set up and manage routes in your WebFramework application.</li> <li>Middleware Management: How to define and use middleware to process requests and responses.</li> <li>Sanity Checks: How to use the sanity check system to ensure your application environment is correct.</li> <li>Tasks: How to create and run tasks from the command line.</li> <li>Templating: How to use the Latte templating engine to render templates.</li> <li>Translations: How to deploy and configure multi-lingual support in your application.</li> <li>Emitting Responses: How to generate responses in actions using the ResponseEmitter or via exceptions.</li> <li>Caching: How to use caching to store and retrieve data efficiently.</li> <li>Queueing: How to queue Jobs and handle them asynchronously.</li> <li>Logging: How to configure log channels and route log output.</li> <li>Event Handling: How to trigger and handle Events with EventListeners.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with WebFramework, follow the Installation Guide to set up your project. Once installed, explore the documentation to learn how to leverage the full capabilities of WebFramework in your application.</p> <p>For any questions or further assistance, please refer to the documentation or reach out to the WebFramework community.</p> <p>Happy coding!</p>"},{"location":"caching/","title":"Caching","text":"<p>This document provides a guide for developers on how to use caching in the WebFramework. Caching is used to store and retrieve data efficiently, reducing the need for repeated computations or database queries.</p>"},{"location":"caching/#overview","title":"Overview","text":"<p>Caching in WebFramework is managed using the <code>Cache</code> interface, which defines the contract for cache implementations. The framework provides two implementations:</p> <ul> <li>RedisCache: A Redis-based implementation for high-performance caching in the web-framework-redis module.</li> <li>NullCache: A no-op implementation that performs no caching, useful for testing or when caching is disabled.</li> </ul>"},{"location":"caching/#using-caching-in-your-application","title":"Using Caching in Your Application","text":"<p>To use caching in your application, you need to inject the <code>Cache</code> service and use its methods to store and retrieve data.</p>"},{"location":"caching/#example-usage","title":"Example Usage","text":"<pre><code>use WebFramework\\Cache\\Cache;\n\nclass ExampleService\n{\n    public function __construct(\n        private Cache $cache,\n    ) {}\n\n    public function getCachedData(string $key): mixed\n    {\n        if ($this-&gt;cache-&gt;exists($key)) {\n            return $this-&gt;cache-&gt;get($key);\n        }\n\n        // Compute or retrieve the data\n        $data = $this-&gt;computeData();\n\n        // Store the data in the cache\n        $this-&gt;cache-&gt;set($key, $data, 3600); // Cache for 1 hour\n\n        return $data;\n    }\n\n    private function computeData(): mixed\n    {\n        // Perform some computation or data retrieval\n        return 'computed data';\n    }\n}\n</code></pre> <p>In this example, the <code>ExampleService</code> uses the <code>Cache</code> service to check if data is cached, retrieve it if available, or compute and cache it if not.</p>"},{"location":"caching/#enabling-rediscache-in-dependency-injection","title":"Enabling RedisCache in Dependency Injection","text":"<p>To enable <code>RedisCache</code> in your application, you first need to include the <code>web-framework-redis</code> module in your project. Then you need to configure it in your dependency injection container.</p> <p>The easiest way to do this is to add the following entry to your <code>definition_files</code> array in your <code>config.php</code> file, before your application definition file:</p> <pre><code>return [\n    'definition_files' =&gt; [\n        '/vendor/avoutic/web-framework/definitions/definitions.php',\n        '/vendor/avoutic/web-framework-redis/definitions/definitions.php',\n        '/definitions/app_definitions.php',\n    ],\n];\n</code></pre> <p>Or you can add the following entry to your application definition file:</p> <pre><code>return [\n    Cache::class =&gt; DI\\autowire(\\WebFramework\\Redis\\RedisCache::class),\n];\n</code></pre>"},{"location":"caching/#providing-an-alternative-caching-implementation","title":"Providing an Alternative Caching Implementation","text":"<p>To provide an alternative caching implementation, you need to create a class that implements the <code>Cache</code> interface. This class should define the methods for storing, retrieving, and invalidating cache items.</p>"},{"location":"caching/#example-custom-cache-implementation","title":"Example Custom Cache Implementation","text":"<pre><code>namespace App\\Cache;\n\nuse WebFramework\\Cache\\Cache;\n\nclass CustomCache implements Cache\n{\n    public function exists(string $path): bool\n    {\n        // Check if the item exists in the cache\n    }\n\n    public function get(string $path): mixed\n    {\n        // Retrieve the item from the cache\n    }\n\n    public function set(string $path, mixed $obj, ?int $expiresAfter = null): void\n    {\n        // Store the item in the cache\n    }\n\n    public function setWithTags(string $path, mixed $obj, array $tags, ?int $expiresAfter = null): void\n    {\n        // Store the item in the cache with tags\n    }\n\n    public function invalidate(string $path): void\n    {\n        // Invalidate the cache item\n    }\n\n    public function invalidateTags(array $tags): void\n    {\n        // Invalidate cache items with the given tags\n    }\n\n    public function flush(): void\n    {\n        // Flush the entire cache\n    }\n}\n</code></pre>"},{"location":"caching/#integrating-the-custom-cache","title":"Integrating the Custom Cache","text":"<p>Once you have implemented your custom cache, you need to register it in your dependency injection container.</p> <pre><code>use App\\Cache\\CustomCache;\nuse WebFramework\\Cache\\Cache;\n\nreturn [\n    Cache::class =&gt; DI\\autowire(CustomCache::class),\n];\n</code></pre>"},{"location":"configuration/","title":"Configuration Management","text":"<p>This document provides a guide on how to construct the configuration tree for your application and how to access the configuration items from application code.</p>"},{"location":"configuration/#configuration-layering","title":"Configuration Layering","text":"<p>The WebFramework uses a layered approach to configuration, allowing multiple configuration files to be merged to form the final configuration. This is managed by the <code>ConfigBuilder</code> class. The <code>TaskRunner</code> class uses the <code>ConfigBuilder</code> class to build the configuration. So in practice, you don't need to worry about the <code>ConfigBuilder</code> class.</p>"},{"location":"configuration/#environment-variables-and-env-files","title":"Environment Variables and .env Files","text":"<p>Before loading configuration files, the framework automatically loads environment variables from <code>.env</code> files in the following order:</p> <ol> <li><code>.env</code> - Main environment file (should be committed to version control with default values)</li> <li><code>.env.local</code> - Local overrides (should be gitignored and contain local/sensitive values)</li> </ol> <p>Environment variables take precedence over .env files, and .env.local takes precedence over .env. This allows for flexible configuration management across different environments.</p>"},{"location":"configuration/#default-configuration-files","title":"Default Configuration Files","text":"<p>The <code>TaskRunner</code> class specifies a default set of configuration files that are used to build the configuration. These files are:</p> <ul> <li><code>/vendor/avoutic/web-framework/config/base_config.php</code></li> <li><code>/config/config.php</code></li> <li><code>?/config/config_local.php</code></li> </ul> <p>The <code>?</code> before a file path indicates that the file is optional. If it exists, it will be included; otherwise, it will be ignored.</p> <p>Meaning that if will load the base configuration file from the WebFramework, then the application configuration file, and finally the local configuration file if it exists.</p>"},{"location":"configuration/#setting-another-set-of-files","title":"Setting Another Set of Files","text":"<p>To use a different set of configuration files, you can call the <code>setConfigFiles</code> method on the <code>TaskRunner</code> instance, passing an array of file paths.</p> <p>As <code>base_config.php</code> is the base configuration file for the WebFramework, it should always be included.</p>"},{"location":"configuration/#example","title":"Example","text":"<pre><code>$taskRunner = new TaskRunner('/path/to/app');\n$taskRunner-&gt;setConfigFiles([\n    '/config/base_config.php',\n    '/config/custom_env.php',\n    '/config/custom_local.php',\n]);\n$taskRunner-&gt;build();\n</code></pre> <p>In this example, the configuration is built using the specified custom configuration files.</p>"},{"location":"configuration/#configbuilder","title":"ConfigBuilder","text":"<p>The <code>ConfigBuilder</code> class is actually responsible for building and managing the configuration. It allows you to merge multiple configuration files on top of each other. As mentioned earlier, you don't need to worry about the <code>ConfigBuilder</code> class. The <code>TaskRunner</code> class uses it internally to build the configuration.</p>"},{"location":"configuration/#key-methods","title":"Key Methods","text":"<ul> <li><code>mergeConfigOnTop(array $config): void</code>: Merges a configuration array on top of the existing global configuration.</li> <li><code>loadConfigFile(string $configLocation): array</code>: Loads a configuration file and returns its contents as an array.</li> <li><code>buildConfig(array $configs): array</code>: Builds the configuration by merging multiple configuration files. The files are specified in order, and each file is merged on top of the previous ones.</li> </ul>"},{"location":"configuration/#example-usage","title":"Example Usage","text":"<pre><code>$configBuilder = new ConfigBuilder('/path/to/app');\n$finalConfig = $configBuilder-&gt;buildConfig([\n    '/config/default.php',\n    '/config/environment.php',\n    '/config/local.php',\n]);\n</code></pre> <p>In this example, the configuration is built by merging <code>default.php</code>, <code>environment.php</code>, and <code>local.php</code> in that order. Each subsequent file can override values from the previous ones.</p>"},{"location":"configuration/#configuration-file-format","title":"Configuration File Format","text":"<p>Configuration files are PHP files that return an associative array. Each file can define any number of configuration settings, which are merged into the final configuration.</p>"},{"location":"configuration/#example-configuration-file","title":"Example Configuration File","text":"<pre><code>&lt;?php\n\nreturn [\n    'database' =&gt; [\n        'host' =&gt; 'localhost',\n        'port' =&gt; 3306,\n        'username' =&gt; 'root',\n        'password' =&gt; '',\n        'dbname' =&gt; 'webframework',\n    ],\n    'app' =&gt; [\n        'debug' =&gt; true,\n        'timezone' =&gt; 'UTC',\n    ],\n];\n</code></pre> <p>In this example, the configuration file defines settings for the database connection and application settings.</p>"},{"location":"configuration/#accessing-configuration-items","title":"Accessing Configuration Items","text":"<p>Once the configuration is built, it can be accessed using the <code>ConfigService</code> class. This class provides methods to retrieve configuration values using dot notation.</p>"},{"location":"configuration/#configservice","title":"ConfigService","text":"<p>The <code>ConfigService</code> class provides access to configuration values.</p>"},{"location":"configuration/#key-methods_1","title":"Key Methods","text":"<ul> <li><code>get(string $location = ''): mixed</code>: Retrieves a configuration value by its location using dot notation. If no location is provided, it returns the entire configuration array.</li> </ul>"},{"location":"configuration/#example-usage-with-dependency-injection","title":"Example Usage with Dependency Injection","text":"<p>In a typical application, you would use dependency injection to access the <code>ConfigService</code>. Here's an example of how you might do this in a class:</p> <pre><code>use WebFramework\\Config\\ConfigService;\n\nclass ExampleClass\n{\n    public function __construct(\n        private ConfigService $configService,\n    ) {}\n\n    public function getDatabaseHost(): string\n    {\n        return $this-&gt;configService-&gt;get('database.host');\n    }\n}\n</code></pre> <p>In this example, the <code>ExampleClass</code> receives the <code>ConfigService</code> as a dependency through its constructor. The <code>getDatabaseHost()</code> method then uses the <code>ConfigService</code> to retrieve the <code>host</code> value from the <code>database</code> configuration.</p>"},{"location":"configuration/#environment-variable-support","title":"Environment Variable Support","text":"<p>The framework supports environment variables for common configuration values. You can use <code>.env</code> files to set these values:</p>"},{"location":"configuration/#database-configuration","title":"Database Configuration","text":"<pre><code>DB_HOST=localhost\nDB_PORT=3306\nDB_USER=myuser\nDB_PASSWORD=mypassword\nDB_NAME=mydatabase\n</code></pre>"},{"location":"configuration/#application-settings","title":"Application Settings","text":"<pre><code>DEBUG=true\nPRODUCTION=false\nTIMEZONE=Europe/Amsterdam\n</code></pre>"},{"location":"configuration/#security-settings","title":"Security Settings","text":"<pre><code>HMAC_KEY=your_secure_hmac_key\nCRYPT_KEY=your_secure_crypt_key\nRECAPTCHA_SITE_KEY=your_recaptcha_site_key\nRECAPTCHA_SECRET_KEY=your_recaptcha_secret_key\n</code></pre>"},{"location":"configuration/#auth-configuration-files","title":"Auth Configuration Files","text":"<p>Environment variables can also be used in auth configuration files located in <code>/config/auth/</code>. For example, in <code>db_config.main.php</code>:</p> <pre><code>&lt;?php\n\nreturn [\n    'database_host' =&gt; env('DB_HOST', 'localhost'),\n    'database_user' =&gt; env('DB_USER', ''),\n    'database_password' =&gt; env('DB_PASSWORD', ''),\n    'database_database' =&gt; env('DB_NAME', ''),\n];\n</code></pre> <p>This maintains backwards compatibility while providing the enhanced type-safe environment variable access.</p>"},{"location":"configuration/#precedence-order","title":"Precedence Order","text":"<p>Configuration values are resolved in the following order (highest to lowest precedence):</p> <ol> <li>System environment variables</li> <li>Relevant <code>.env</code> file depending on <code>APP_ENV</code> (e.g. <code>.env.local</code> or <code>.env.production</code>, and '.env' if no <code>APP_ENV</code> is set or no <code>.env.APP_ENV</code> file exists)</li> <li>Configuration files (by default <code>config_local.php</code> &gt; <code>config.php</code> &gt; <code>base_config.php</code>)</li> </ol> <p>This allows you to override any configuration value at any level while maintaining sensible defaults.</p>"},{"location":"database-migrations/","title":"Database Migrations","text":"<p>This document describes how to manage database migrations in WebFramework using the new timestamp-based migration system introduced in WebFramework v9.</p>"},{"location":"database-migrations/#migration-file-organization","title":"Migration File Organization","text":"<p>Database migration files should be placed in the <code>migrations</code> directory of your application. Each migration file uses a timestamp-based naming convention and has a <code>.php</code> extension. For example:</p> <pre><code>migrations/\n\u251c\u2500\u2500 2025_06_10_120000_create_products.php\n\u251c\u2500\u2500 2025_06_10_130000_add_product_code.php\n\u251c\u2500\u2500 2025_06_10_140000_add_email_verification.php\n\u2514\u2500\u2500 2025_06_10_150000_add_newsletter_preference.php\n</code></pre>"},{"location":"database-migrations/#file-naming-convention","title":"File Naming Convention","text":"<p>Migration files follow the format: <code>YYYY_MM_DD_HHMMSS_description.php</code></p> <ul> <li><code>YYYY_MM_DD_HHMMSS</code>: Timestamp when the migration was created</li> <li><code>description</code>: Brief description of what the migration does (snake_case)</li> <li>Files are executed in chronological order based on the timestamp</li> </ul>"},{"location":"database-migrations/#migration-tracking","title":"Migration Tracking","text":"<p>The system uses a <code>migrations</code> table to track which migrations have been executed, replacing the old version-based system. This table automatically tracks:</p> <ul> <li>Migration filename</li> <li>Migration type (framework or app)</li> <li>Batch number (for rollback grouping)</li> <li>Execution timestamp</li> </ul> <p>No manual version configuration is required in your config files.</p>"},{"location":"database-migrations/#migration-structure","title":"Migration Structure","text":"<p>Each migration file contains both <code>up</code> and <code>down</code> directions for forward and rollback operations:</p> <pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            // Actions to apply the migration\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            // Actions to rollback the migration\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#cli-commands","title":"CLI Commands","text":"<p>The new migration system provides several CLI commands for managing migrations:</p>"},{"location":"database-migrations/#run-migrations","title":"Run Migrations","text":"<p>Execute all pending migrations:</p> <pre><code>php Framework db:migrate\n</code></pre> <p>Options: - <code>--dry-run</code> or <code>-d</code>: Preview what would be executed without making changes - <code>--framework</code> or <code>-f</code>: Run only framework migrations</p>"},{"location":"database-migrations/#check-migration-status","title":"Check Migration Status","text":"<p>View the status of all migrations:</p> <pre><code>php Framework db:status\n</code></pre> <p>This shows executed and pending migrations for both framework and application code.</p>"},{"location":"database-migrations/#generate-new-migration","title":"Generate New Migration","text":"<p>Create a new migration file with the correct timestamp format:</p> <pre><code>php Framework db:make create_products_table\n</code></pre> <p>This generates a file like <code>2025_06_10_120000_create_products_table.php</code> with the basic up/down structure.</p>"},{"location":"database-migrations/#migrate-from-legacy-system","title":"Migrate from Legacy System","text":"<p>If upgrading from the old numbered migration system, use:</p> <pre><code>php Framework db:migrate-from-scheme\n</code></pre> <p>This registers existing migrations as \"already executed\" to prevent re-application.</p>"},{"location":"database-migrations/#migration-from-legacy-system","title":"Migration from Legacy System","text":"<p>If you're upgrading from the old <code>db_scheme</code> numbered migration system:</p> <ol> <li>Run the migration command as a developer: <code>php Framework db:convert-from-scheme</code></li> <li>Remove old system: Move <code>db_scheme</code> to <code>db_scheme_old</code> or remove it entirely</li> <li>Remove config: Delete <code>versions.required_app_db</code> from your config</li> <li>Verify database: Ensure all required tables exist and are correct. This conversion assumes you had WebFramework 8 compatible tables before running the command.</li> </ol>"},{"location":"database-migrations/#migration-actions","title":"Migration Actions","text":"<p>The DatabaseManager supports various actions for modifying the database schema. Here are all the supported actions:</p>"},{"location":"database-migrations/#create-table","title":"Create Table","text":"<p>Creates a new table in the database.</p>"},{"location":"database-migrations/#fields","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"create_table\"</li> <li><code>table_name</code> (required): The name of the table to create</li> <li><code>fields</code> (required): An array of field definitions</li> <li><code>constraints</code> (required): An array of constraint definitions</li> </ul>"},{"location":"database-migrations/#field-definition","title":"Field Definition","text":"<p>Each field definition is an associative array that can include the following keys:</p> <ul> <li><code>name</code> (required): The name of the field</li> <li><code>type</code> (required): The data type of the field. Common types include:</li> <li>String types (require quotes for default values):<ul> <li><code>varchar</code>: Variable-length string (requires size)</li> <li><code>char</code>: Fixed-length string (requires size)</li> <li><code>text</code>: Text field</li> <li><code>tinytext</code>: Small text field</li> <li><code>mediumtext</code>: Medium text field</li> <li><code>longtext</code>: Large text field</li> <li><code>enum</code>: Enumerated values</li> <li><code>set</code>: Set of values</li> <li><code>json</code>: JSON data</li> </ul> </li> <li>Binary types (require quotes for default values):<ul> <li><code>binary</code>: Fixed-length binary (requires size)</li> <li><code>varbinary</code>: Variable-length binary (requires size)</li> <li><code>blob</code>: Binary large object</li> <li><code>tinyblob</code>: Small binary large object</li> <li><code>mediumblob</code>: Medium binary large object</li> <li><code>longblob</code>: Large binary large object</li> </ul> </li> <li>Date/Time types (require quotes for default values unless using functions):<ul> <li><code>datetime</code>: Date and time</li> <li><code>timestamp</code>: Timestamp</li> <li><code>date</code>: Date</li> <li><code>time</code>: Time</li> </ul> </li> <li>Numeric types (no quotes for default values):<ul> <li><code>int</code>: Integer (optional size)</li> <li><code>tinyint</code>: Small integer (optional size)</li> <li><code>smallint</code>: Small integer (optional size)</li> <li><code>mediumint</code>: Medium integer (optional size)</li> <li><code>bigint</code>: Large integer (optional size)</li> <li><code>decimal</code>: Decimal number (optional size)</li> <li><code>numeric</code>: Numeric value (optional size)</li> <li><code>float</code>: Floating point number</li> <li><code>double</code>: Double precision number</li> </ul> </li> <li>Special types:<ul> <li><code>foreign_key</code>: Foreign key reference</li> </ul> </li> <li><code>size</code> (required/optional): The size or length of the field:</li> <li>Required for: varchar, char, binary, varbinary</li> <li>Optional for: int, tinyint, smallint, mediumint, bigint, decimal, numeric</li> <li>Not used for: text, datetime, timestamp, date, time, json</li> <li><code>null</code> (optional): If a field can be NULL (default: false)</li> <li><code>default</code> (optional): The default value for the field. Can be either:</li> <li>A string or number value: Will be quoted automatically based on the field type</li> <li>An array with a 'function' key: The value will be used as-is without quotes as a SQL function</li> </ul>"},{"location":"database-migrations/#constraint-definition","title":"Constraint Definition","text":"<p>Each constraint definition is an associative array that can include the following keys:</p> <ul> <li><code>type</code> (required): The type of constraint. Common types include:</li> <li><code>unique</code>: Unique constraint</li> <li><code>index</code>: Index constraint</li> <li><code>name</code> (optional): The name of the constraint.</li> <li><code>values</code> (required): The values to use for the constraint.</li> <li>For <code>unique</code> constraints, this is an array of field names.</li> <li>For <code>index</code> constraints, this is an array of field names.</li> </ul>"},{"location":"database-migrations/#example","title":"Example","text":""},{"location":"database-migrations/#example-with-various-types-and-defaults","title":"Example with Various Types and Defaults","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'create_table',\n                'table_name' =&gt; 'items',\n                'fields' =&gt; [\n                    [\n                        'name' =&gt; 'name',\n                        'type' =&gt; 'varchar',\n                        'size' =&gt; 255,\n                        'default' =&gt; 'Unnamed Item',  // Will be: DEFAULT 'Unnamed Item'\n                    ],\n                    [\n                        'name' =&gt; 'created_at',\n                        'type' =&gt; 'datetime',\n                        'default' =&gt; ['function' =&gt; 'CURRENT_TIMESTAMP'],  // Will be: DEFAULT CURRENT_TIMESTAMP\n                    ],\n                    [\n                        'name' =&gt; 'status',\n                        'type' =&gt; 'enum',\n                        'default' =&gt; 'pending',  // Will be: DEFAULT 'pending'\n                    ],\n                    [\n                        'name' =&gt; 'count',\n                        'type' =&gt; 'int',\n                        'default' =&gt; 0,  // Will be: DEFAULT 0\n                    ],\n                    [\n                        'name' =&gt; 'identifier',\n                        'type' =&gt; 'varchar'\n                        'size' =&gt; 255,\n                        'null' =&gt; true,\n                    ]\n                    [\n                        'name' =&gt; 'metadata',\n                        'type' =&gt; 'json',\n                        'default' =&gt; '{}',  // Will be: DEFAULT '{}'\n                    ],\n                    [\n                        'name' =&gt; 'type_id',\n                        'type' =&gt; 'foreign_key',\n                        'foreign_table' =&gt; 'item_types',\n                        'foreign_field' =&gt; 'id',\n                        'on_delete' =&gt; 'SET NULL',\n                        'on_update' =&gt; 'CASCADE',\n                    ],\n                ],\n                'constraints' =&gt; [\n                    [\n                        'type' =&gt; 'unique',\n                        'values' =&gt; ['name'],\n                    ],\n                    [\n                        'type' =&gt; 'unique',\n                        'name' =&gt; 'item_uniq_identifier',\n                        'values' =&gt; ['identifier'],\n                    ],\n                    [\n                        'type' =&gt; 'index',\n                        'name' =&gt; 'item_idx_identifier',\n                        'values' =&gt; ['identifier']\n                    ],\n                ],\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'raw_query',\n                'query' =&gt; 'DROP TABLE IF EXISTS `items`',\n                'params' =&gt; [],\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#create-trigger","title":"Create Trigger","text":"<p>Creates a new trigger in the database.</p>"},{"location":"database-migrations/#fields_1","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"create_trigger\"</li> <li><code>table_name</code> (required): The name of the table for the trigger</li> <li><code>trigger</code> (required): An array containing trigger details</li> <li><code>name</code> (required): The name of the trigger</li> <li><code>time</code> (required): The trigger time (BEFORE or AFTER)</li> <li><code>event</code> (required): The trigger event (INSERT, UPDATE, or DELETE)</li> <li><code>action</code> (required): The SQL statement to execute when the trigger fires</li> </ul>"},{"location":"database-migrations/#example_1","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'create_trigger',\n                'table_name' =&gt; 'users',\n                'trigger' =&gt; [\n                    'name' =&gt; 'update_last_modified',\n                    'time' =&gt; 'BEFORE',\n                    'event' =&gt; 'UPDATE',\n                    'action' =&gt; 'SET NEW.updated_at = CURRENT_TIMESTAMP',\n                ],\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'raw_query',\n                'query' =&gt; 'DROP TRIGGER IF EXISTS `update_last_modified`',\n                'params' =&gt; [],\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#add-column","title":"Add Column","text":"<p>Adds a new column to an existing table.</p>"},{"location":"database-migrations/#fields_2","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"add_column\"</li> <li><code>table_name</code> (required): The name of the table to alter</li> <li><code>field</code> (required): An array containing the new column details</li> </ul>"},{"location":"database-migrations/#example_2","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'add_column',\n                'table_name' =&gt; 'users',\n                'field' =&gt; [\n                    'name' =&gt; 'last_login',\n                    'type' =&gt; 'datetime',\n                    'null' =&gt; true,\n                ],\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'raw_query',\n                'query' =&gt; 'ALTER TABLE `users` DROP COLUMN `last_login`',\n                'params' =&gt; [],\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#add-constraint","title":"Add Constraint","text":"<p>Adds a new constraint to an existing table.</p>"},{"location":"database-migrations/#fields_3","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"add_constraint\"</li> <li><code>table_name</code> (required): The name of the table to alter</li> <li><code>constraint</code> (required): An array containing the constraint details</li> </ul>"},{"location":"database-migrations/#example_3","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'add_constraint',\n                'table_name' =&gt; 'users',\n                'constraint' =&gt; [\n                    'type' =&gt; 'unique',\n                    'name' =&gt; 'user_uniq_username_email',\n                    'values' =&gt; ['username', 'email'],\n                ],\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'raw_query',\n                'query' =&gt; 'ALTER TABLE `users` DROP INDEX `user_uniq_username_email`',\n                'params' =&gt; [],\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#insert-row","title":"Insert Row","text":"<p>Inserts a new row into a table.</p>"},{"location":"database-migrations/#fields_4","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"insert_row\"</li> <li><code>table_name</code> (required): The name of the table to insert into</li> <li><code>values</code> (required): An array of column-value pairs to insert</li> </ul>"},{"location":"database-migrations/#example_4","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'insert_row',\n                'table_name' =&gt; 'users',\n                'values' =&gt; [\n                    'username' =&gt; 'admin',\n                    'email' =&gt; 'admin@example.com',\n                    'created_at' =&gt; '2023-04-01 00:00:00',\n                ],\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'raw_query',\n                'query' =&gt; 'DELETE FROM `users` WHERE `username` = ?',\n                'params' =&gt; ['admin'],\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#modify-column-type","title":"Modify Column Type","text":"<p>Modifies the type or attributes of an existing column.</p>"},{"location":"database-migrations/#fields_5","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"modify_column_type\"</li> <li><code>table_name</code> (required): The name of the table to alter</li> <li><code>field</code> (required): An array containing the modified column details</li> </ul>"},{"location":"database-migrations/#example_5","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'modify_column_type',\n                'table_name' =&gt; 'users',\n                'field' =&gt; [\n                    'name' =&gt; 'username',\n                    'type' =&gt; 'varchar',\n                    'size' =&gt; 100,\n                    'null' =&gt; false,\n                ],\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'modify_column_type',\n                'table_name' =&gt; 'users',\n                'field' =&gt; [\n                    'name' =&gt; 'username',\n                    'type' =&gt; 'varchar',\n                    'size' =&gt; 255,\n                    'null' =&gt; false,\n                ],\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#rename-column","title":"Rename Column","text":"<p>Renames an existing column in a table.</p>"},{"location":"database-migrations/#fields_6","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"rename_column\"</li> <li><code>table_name</code> (required): The name of the table to alter</li> <li><code>name</code> (required): The current name of the column</li> <li><code>new_name</code> (required): The new name for the column</li> </ul>"},{"location":"database-migrations/#example_6","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'rename_column',\n                'table_name' =&gt; 'users',\n                'name' =&gt; 'email',\n                'new_name' =&gt; 'user_email',\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'rename_column',\n                'table_name' =&gt; 'users',\n                'name' =&gt; 'user_email',\n                'new_name' =&gt; 'email',\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#rename-table","title":"Rename Table","text":"<p>Renames an existing table.</p>"},{"location":"database-migrations/#fields_7","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"rename_table\"</li> <li><code>table_name</code> (required): The current name of the table</li> <li><code>new_name</code> (required): The new name for the table</li> </ul>"},{"location":"database-migrations/#example_7","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'rename_table',\n                'table_name' =&gt; 'users',\n                'new_name' =&gt; 'app_users',\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'rename_table',\n                'table_name' =&gt; 'app_users',\n                'new_name' =&gt; 'users',\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#raw-query","title":"Raw Query","text":"<p>Executes a raw SQL query.</p>"},{"location":"database-migrations/#fields_8","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"raw_query\"</li> <li><code>query</code> (required): The raw SQL query to execute</li> <li><code>params</code> (required): An array of parameters for the query (can be empty)</li> </ul>"},{"location":"database-migrations/#example_8","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'raw_query',\n                'query' =&gt; 'UPDATE users SET status = ? WHERE last_login &lt; ?',\n                'params' =&gt; ['inactive', '2023-01-01 00:00:00'],\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'raw_query',\n                'query' =&gt; 'UPDATE users SET status = ? WHERE status = ?',\n                'params' =&gt; ['active', 'inactive'],\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"database-migrations/#run-task","title":"Run Task","text":"<p>Executes a custom task defined in a separate class.</p>"},{"location":"database-migrations/#fields_9","title":"Fields","text":"<ul> <li><code>type</code> (required): Must be \"run_task\"</li> <li><code>task</code> (required): The fully qualified class name of the task to run</li> </ul>"},{"location":"database-migrations/#example_9","title":"Example","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'run_task',\n                'task' =&gt; 'App\\Tasks\\CustomMigrationTask',\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'run_task',\n                'task' =&gt; 'App\\Tasks\\ReverseCustomMigrationTask',\n            ],\n        ],\n    ],\n];\n</code></pre> <p>Note: The custom task class must implement the <code>Task</code> and be registered in the dependency injection container.</p>"},{"location":"database/","title":"Database Usage","text":"<p>This document provides a guide for developers on how to use the database in the WebFramework. It covers the basic operations, including executing queries, inserting data, and managing transactions.</p>"},{"location":"database/#overview","title":"Overview","text":"<p>The WebFramework uses the <code>Database</code> interface to define the contract for database operations. The default implementation is <code>MysqliDatabase</code>, which uses the MySQLi extension to interact with a MySQL database.</p> <p>Most interactions with the database are done via Entity Repositories. But there are multiple cases where you might want to interact with the database directly.</p>"},{"location":"database/#executing-queries","title":"Executing Queries","text":"<p>To execute a query, you use the <code>query()</code> method. This method is used for executing SELECT, UPDATE, DELETE, and other non-insert queries.</p>"},{"location":"database/#example-executing-a-query","title":"Example: Executing a Query","text":"<pre><code>use WebFramework\\Database\\Database;\n\nclass ExampleService\n{\n    public function __construct(\n        private Database $database,\n    ) {}\n\n    public function getUsers(): array\n    {\n        $query = 'SELECT * FROM users WHERE active = ?';\n        $params = [1];\n\n        $result = $this-&gt;database-&gt;query($query, $params);\n\n        return $result-&gt;fetchAll();\n    }\n}\n</code></pre> <p>In this example, the <code>ExampleService</code> uses the <code>query()</code> method to retrieve all active users from the <code>users</code> table.</p>"},{"location":"database/#inserting-data","title":"Inserting Data","text":"<p>To insert data into the database, you use the <code>insertQuery()</code> method. This method executes an INSERT query and returns the ID of the last inserted row.</p>"},{"location":"database/#example-inserting-data","title":"Example: Inserting Data","text":"<pre><code>use WebFramework\\Database\\Database;\n\nclass UserService\n{\n    public function __construct(\n        private Database $database,\n    ) {}\n\n    public function addUser(string $username, string $email): int\n    {\n        $query = 'INSERT INTO users (username, email) VALUES (?, ?)';\n        $params = [$username, $email];\n\n        return $this-&gt;database-&gt;insertQuery($query, $params);\n    }\n}\n</code></pre> <p>In this example, the <code>UserService</code> uses the <code>insertQuery()</code> method to add a new user to the <code>users</code> table and returns the new user's ID.</p>"},{"location":"database/#managing-transactions","title":"Managing Transactions","text":"<p>Transactions are used to ensure that a series of database operations are executed atomically. You can start a transaction using the <code>startTransaction()</code> method and commit it using the <code>commitTransaction()</code> method.</p>"},{"location":"database/#example-using-transactions","title":"Example: Using Transactions","text":"<pre><code>use WebFramework\\Database\\Database;\n\nclass OrderService\n{\n    public function __construct(\n        private Database $database,\n    ) {}\n\n    public function placeOrder(array $orderData): void\n    {\n        $this-&gt;database-&gt;startTransaction();\n\n        try {\n            // Insert order\n            $orderId = $this-&gt;database-&gt;insertQuery('INSERT INTO orders (customer_id, total) VALUES (?, ?)', [\n                $orderData['customer_id'],\n                $orderData['total'],\n            ]);\n\n            // Insert order items\n            foreach ($orderData['items'] as $item) {\n                $this-&gt;database-&gt;insertQuery('INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)', [\n                    $orderId,\n                    $item['product_id'],\n                    $item['quantity'],\n                ]);\n            }\n\n            // Commit transaction\n            $this-&gt;database-&gt;commitTransaction();\n        } catch (\\Exception $e) {\n            // Rollback transaction on error\n            $this-&gt;database-&gt;rollbackTransaction();\n            throw $e;\n        }\n    }\n}\n</code></pre> <p>In this example, the <code>OrderService</code> uses a transaction to ensure that both the order and its items are inserted into the database atomically. If an error occurs, the transaction is rolled back.</p>"},{"location":"dependency-injection/","title":"Dependency Injection","text":"<p>This document provides a guide for developers on how to use and configure dependency injection in the WebFramework. The framework uses PHP-DI for managing dependencies, allowing you to define and override services and classes in a flexible manner.</p>"},{"location":"dependency-injection/#overview","title":"Overview","text":"<p>Dependency injection in WebFramework is managed using PHP-DI, a powerful dependency injection container for PHP. It allows you to define how classes and services are instantiated and configured, making it easy to manage dependencies across your application.</p> <p>The <code>BootstrapService</code> and <code>SlimAppTask</code> classes are responsible for setting up the dependency injection container and registering services. They use the configured definition files to do this.</p>"},{"location":"dependency-injection/#default-definition-files","title":"Default Definition Files","text":"<p>The base configuration specifies a default set of definition files that are used for dependency injection. These files are:</p> <ul> <li><code>/vendor/avoutic/web-framework/definitions/definitions.php</code></li> <li><code>/definitions/app_definitions.php</code></li> </ul> <p>Meaning that if will load the base definition file from the WebFramework, then the application definition file.</p>"},{"location":"dependency-injection/#setting-another-set-of-files","title":"Setting Another Set of Files","text":"<p>To set your own definition files, you need to specify them in the <code>base_config.php</code> file under the <code>definition_files</code> key. These files contain PHP-DI definitions that configure how services and classes are instantiated.</p> <p>If the file starts with a <code>?</code>, it will be ignored if it does not exist. This is useful for local configuration files that you don't want to commit to version control.</p>"},{"location":"dependency-injection/#example-configuration","title":"Example Configuration","text":"<pre><code>return [\n    // Other configuration settings...\n\n    'definition_files' =&gt; [\n        '/vendor/avoutic/web-framework/definitions/definitions.php',\n        '/definitions/my_definitions.php', // Your custom definitions\n        '?/definitions/local_definitions.php', // Local definitions that are not committed\n    ],\n];\n</code></pre> <p>In this example, <code>my_definitions.php</code> is a custom definition file that you can use to define your own services and override existing ones.</p>"},{"location":"dependency-injection/#overriding-classes","title":"Overriding Classes","text":"<p>To override a class like <code>Instrumentation</code>, you need to provide a new implementation in your definition file. This is done using PHP-DI's <code>autowire</code> and <code>constructor</code> methods.</p>"},{"location":"dependency-injection/#example-overriding-instrumentation","title":"Example: Overriding Instrumentation","text":"<p>Suppose you want to replace the default <code>Instrumentation</code> implementation with a custom one. You can do this by adding the following entry to your definition file:</p> <pre><code>use App\\Instrumentation\\CustomInstrumentation;\nuse WebFramework\\Diagnostics\\Instrumentation;\n\nreturn [\n    Instrumentation::class =&gt; DI\\autowire(CustomInstrumentation::class),\n];\n</code></pre> <p>In this example, <code>CustomInstrumentation</code> is a class that implements the <code>Instrumentation</code> interface. By using <code>DI\\autowire</code>, PHP-DI will automatically inject dependencies into the <code>CustomInstrumentation</code> class.</p> <p>For more information on PHP-DI, see the PHP-DI documentation.</p>"},{"location":"emitting-responses/","title":"Emitting Responses","text":"<p>This document provides a guide for developers on how to generate responses in an Action using the <code>ResponseEmitter</code> or via exceptions through the <code>ErrorRedirectMiddleware</code>. It also covers how to build redirects programmatically.</p>"},{"location":"emitting-responses/#generating-responses-in-an-action","title":"Generating Responses in an Action","text":"<p>In WebFramework, responses can be generated directly using the <code>ResponseEmitter</code> or indirectly by throwing exceptions that are handled by the <code>ErrorRedirectMiddleware</code>.</p>"},{"location":"emitting-responses/#using-responseemitter","title":"Using ResponseEmitter","text":"<p>The <code>ResponseEmitter</code> class provides methods to generate various types of responses, such as redirects, errors, and standard HTTP responses.</p>"},{"location":"emitting-responses/#example-generating-a-redirect-response","title":"Example: Generating a Redirect Response","text":"<pre><code>use WebFramework\\Http\\ResponseEmitter;\n\nclass ExampleAction\n{\n    public function __construct(\n        private ResponseEmitter $responseEmitter,\n    ) {}\n\n    public function __invoke(): ResponseInterface\n    {\n        return $this-&gt;responseEmitter-&gt;redirect('/home');\n    }\n}\n</code></pre>"},{"location":"emitting-responses/#using-exceptions","title":"Using Exceptions","text":"<p>Exceptions can be thrown in an Action or Service class to trigger specific responses. The <code>ErrorRedirectMiddleware</code> (assuming it is enabled) handles these exceptions and generates the appropriate HTTP response.</p>"},{"location":"emitting-responses/#exceptions-handled-by-errorredirectmiddleware","title":"Exceptions Handled by ErrorRedirectMiddleware","text":"<ul> <li>RedirectException: Triggers a redirect to a specified URL.</li> <li> <p>HTTP Code: 302 (Found)</p> </li> <li> <p>HttpForbiddenException: Indicates that access to the requested resource is forbidden.</p> </li> <li> <p>HTTP Code: 403 (Forbidden)</p> </li> <li> <p>HttpNotFoundException: Indicates that the requested resource was not found.</p> </li> <li> <p>HTTP Code: 404 (Not Found)</p> </li> <li> <p>HttpUnauthorizedException: Indicates that authentication is required to access the resource.</p> </li> <li> <p>HTTP Code: 401 (Unauthorized)</p> </li> <li> <p>BlacklistException: Indicates that the user is blacklisted.</p> </li> <li> <p>HTTP Code: 403 (Forbidden)</p> </li> <li> <p>Throwable: Any other unhandled exception results in a generic error response.</p> </li> <li>HTTP Code: 500 (Internal Server Error)</li> </ul>"},{"location":"emitting-responses/#building-redirects-programmatically","title":"Building Redirects Programmatically","text":"<p>The <code>ResponseEmitter</code> service provides methods to build and generate redirect responses programmatically. This allows you to construct redirects with dynamic parameters and query strings.</p>"},{"location":"emitting-responses/#example-building-a-simple-redirect","title":"Example: Building a Simple Redirect","text":"<pre><code>use WebFramework\\Http\\ResponseEmitter;\n\nclass ExampleService\n{\n    public function __construct(\n        private ResponseEmitter $responseEmitter,\n    ) {}\n\n    public function redirectToHome(): ResponseInterface\n    {\n        return $this-&gt;responseEmitter-&gt;redirect('/home');\n    }\n}\n</code></pre>"},{"location":"emitting-responses/#example-building-a-programmatic-redirect","title":"Example: Building a Programmatic Redirect","text":"<pre><code>use WebFramework\\Http\\ResponseEmitter;\n\nclass ExampleService\n{\n    public function __construct(\n        private ResponseEmitter $responseEmitter,\n    ) {}\n\n    public function redirectToUserProfile(int $userId): ResponseInterface\n    {\n        return $this-&gt;responseEmitter-&gt;redirect('/user/{id}', ['id' =&gt; $userId]);\n    }\n}\n</code></pre>"},{"location":"emitting-responses/#example-building-a-redirect-with-query-parameters","title":"Example: Building a Redirect with Query Parameters","text":"<pre><code>use WebFramework\\Http\\ResponseEmitter;\n\nclass ExampleService\n{\n    public function __construct(\n        private ResponseEmitter $responseEmitter,\n    ) {}\n\n    public function redirectToSearch(string $query): ResponseInterface\n    {\n        return $this-&gt;responseEmitter-&gt;buildQueryRedirect('/search', [], ['q' =&gt; $query]);\n    }\n}\n</code></pre> <p>In these examples, the <code>ResponseEmitter</code> is used to construct redirect responses with dynamic path parameters and query strings.</p>"},{"location":"entities-and-repositories/","title":"Entity and Repository Pattern","text":"<p>This document provides a guide for developers on the Entity and Repository pattern used in the WebFramework. This pattern is used to separate the concerns of data representation and data persistence, making your application more modular and maintainable.</p>"},{"location":"entities-and-repositories/#overview","title":"Overview","text":"<p>In the WebFramework, entities are objects that represent data in your application. They are responsible for holding data and providing methods to access and manipulate that data. Repositories, on the other hand, are responsible for persisting entities to the database and retrieving them.</p>"},{"location":"entities-and-repositories/#entities","title":"Entities","text":"<p>Entities are classes that extend <code>EntityCore</code>. They define the properties and methods for accessing and manipulating data. Entities should not contain any business logic; they are purely for data representation.</p>"},{"location":"entities-and-repositories/#repositories","title":"Repositories","text":"<p>Repositories are classes that extend <code>RepositoryCore</code>. They provide methods for storing, retrieving, and updating entities in the database. Repositories handle the database interactions, allowing entities to remain focused on data representation.</p> <p>How to create new entities and repositories is described in the New Entity and Repository Generation document.</p>"},{"location":"entities-and-repositories/#retrieving-entities-with-a-repository","title":"Retrieving Entities with a Repository","text":"<p>Repositories provide several methods for retrieving entities from the database. Some methods return single entities, while others return <code>EntityCollection</code> objects.</p>"},{"location":"entities-and-repositories/#single-entity-methods","title":"Single Entity Methods","text":"<p>These methods return either a single entity or null:</p>"},{"location":"entities-and-repositories/#by-id","title":"By ID","text":"<pre><code>$user = $userRepository-&gt;getObjectById($userId);  // Returns User|null\n</code></pre>"},{"location":"entities-and-repositories/#by-filter","title":"By Filter","text":"<p>This method takes a single filter as an array. If multiple objects are found, the function will throw an exception.</p> <pre><code>$user = $userRepository-&gt;getObject(['email' =&gt; $email]);  // Returns User|null\n</code></pre>"},{"location":"entities-and-repositories/#collection-methods","title":"Collection Methods","text":"<p>These methods return an <code>EntityCollection</code> object:</p>"},{"location":"entities-and-repositories/#multiple-entities","title":"Multiple Entities","text":"<p>To retrieve multiple entities, you can use the <code>getObjects</code> method. This method takes the following parameters:</p> <ul> <li><code>offset</code>: The offset of the first entity to retrieve.</li> <li><code>limit</code>: The number of entities to retrieve (-1 for all).</li> <li><code>filter</code>: An array of filter conditions.</li> <li><code>order</code>: The order by clause.</li> </ul> <p>The filter is a key-value pair array where the key is the field name and the value is the value to filter by. Each key-value pair being a filter condition. The key is always a field name and the value is the value to filter by. The value can be a string, a number, boolean, null, or an array for describing an operator other than equals.</p> <pre><code>// Returns EntityCollection&lt;User&gt;\n$users = $userRepository-&gt;getObjects(0, 10, [\n        'email' =&gt; $email,\n        'active' =&gt; true,\n        'last_login' =&gt; [ '&gt;', strtotime('-1 month') ],\n    ],\n    'order' =&gt; 'username ASC',\n);\n</code></pre>"},{"location":"entities-and-repositories/#counting-entities-matching-a-filter","title":"Counting Entities matching a filter","text":"<p>You can count the number of entities matching a filter using the <code>countObjects</code> method. This method takes a single filter as an array.</p>"},{"location":"entities-and-repositories/#custom-query","title":"Custom Query","text":"<pre><code>// Returns EntityCollection&lt;User&gt;\n$query = 'SELECT * FROM users WHERE last_login &gt; ?';\n$params = [strtotime('-1 month')];\n$users = $userRepository-&gt;getFromQuery($query, $params);\n</code></pre>"},{"location":"entities-and-repositories/#working-with-entitycollection","title":"Working with EntityCollection","text":"<p><code>EntityCollection</code> is a specialized class for handling collections of entities. It implements both <code>Iterator</code> and <code>Countable</code> interfaces, providing several advantages over regular arrays:</p>"},{"location":"entities-and-repositories/#key-features","title":"Key Features","text":"<ul> <li>Type-safe iteration over entities</li> <li>Built-in counting functionality</li> <li>Methods for bulk operations</li> <li>Easy conversion to arrays</li> </ul>"},{"location":"entities-and-repositories/#example-usage","title":"Example Usage","text":""},{"location":"entities-and-repositories/#iterating-over-a-collection","title":"Iterating Over a Collection","text":"<pre><code>$users = $userRepository-&gt;getObjects(0, 10);\nforeach ($users as $user) {\n    echo $user-&gt;getUsername();\n}\n</code></pre>"},{"location":"entities-and-repositories/#counting-entities","title":"Counting Entities","text":"<pre><code>$userCount = $users-&gt;count();\n</code></pre>"},{"location":"entities-and-repositories/#converting-to-array","title":"Converting to Array","text":"<p>You can convert an EntityCollection to an array in two ways:</p> <ol> <li> <p>Convert to an array of entity arrays: <pre><code>$arrayOfArrays = $users-&gt;toArray();  // Each entity is converted to array form\n</code></pre></p> </li> <li> <p>Apply a custom callback to each entity: <pre><code>$usernames = $users-&gt;call(function($user) {\n    return $user-&gt;getUsername();\n});\n</code></pre></p> </li> </ol>"},{"location":"entities-and-repositories/#entitycollection-vs-array","title":"EntityCollection vs Array","text":"<p>Here's why EntityCollection is preferred over regular arrays:</p> <ol> <li>Type Safety: EntityCollection is generic-typed, ensuring all items are of the same entity type</li> <li>Iteration Control: Provides controlled iteration without exposing the underlying array</li> <li>Bulk Operations: Built-in methods for operating on all entities at once</li> <li>Memory Efficiency: Lazy loading capabilities can be implemented without changing the interface</li> <li>Consistency: Ensures consistent behavior across the application</li> </ol>"},{"location":"entities-and-repositories/#example-updating-multiple-entities","title":"Example: Updating Multiple Entities","text":"<p>Here's an example of working with an EntityCollection:</p> <pre><code>use App\\Repository\\UserRepository;\n\nclass UserService\n{\n    public function __construct(\n        private UserRepository $userRepository,\n    ) {}\n\n    public function deactivateInactiveUsers(int $daysInactive): void\n    {\n        $query = 'SELECT * FROM users WHERE last_login &lt; ?';\n        $params = [strtotime(\"-{$daysInactive} days\")];\n\n        $inactiveUsers = $this-&gt;userRepository-&gt;getFromQuery($query, $params);\n\n        foreach ($inactiveUsers as $user) {\n            $user-&gt;setActive(false);\n            $this-&gt;userRepository-&gt;save($user);\n        }\n\n        // Or get a count of affected users\n        $affectedCount = $inactiveUsers-&gt;count();\n    }\n}\n</code></pre>"},{"location":"events/","title":"Event System","text":"<p>The WebFramework provides a robust event system that allows for decoupled communication between different parts of your application. This system follows the observer pattern and supports both synchronous and asynchronous event handling.</p>"},{"location":"events/#core-components","title":"Core Components","text":""},{"location":"events/#eventservice","title":"EventService","text":"<p>The <code>EventService</code> is the central manager for all events in the application. It provides methods to:</p> <ul> <li>Register events and their listeners</li> <li>Dispatch events</li> <li>Manage event listeners</li> <li>Handle queued event listeners</li> </ul>"},{"location":"events/#event-interface","title":"Event Interface","text":"<p>Events are simple data containers that implement the <code>Event</code> interface. They should contain only the data needed for the event, not the logic:</p> <pre><code>interface Event {}\n</code></pre>"},{"location":"events/#eventlistener-interface","title":"EventListener Interface","text":"<p>Event listeners implement the <code>EventListener</code> interface and contain the actual logic for handling events:</p> <pre><code>interface EventListener\n{\n    public function handle(Event $event): bool;\n}\n</code></pre>"},{"location":"events/#queuedeventlistener","title":"QueuedEventListener","text":"<p>The <code>QueuedEventListener</code> abstract class provides a base for event listeners that should be processed asynchronously:</p> <pre><code>abstract class QueuedEventListener implements EventListener\n{\n    protected string $queueName = 'default';\n\n    public function getQueueName(): string\n    {\n        return $this-&gt;queueName;\n    }\n}\n</code></pre>"},{"location":"events/#usage","title":"Usage","text":""},{"location":"events/#creating-an-event","title":"Creating an Event","text":"<p>An Event should only contain data and no logic. All logic related to an Event should be in a separate EventListener.</p> <pre><code>class UserRegisteredEvent implements Event\n{\n    public function __construct(\n        private int $userId,\n        private string $email\n    ) {}\n\n    public function getUserId(): int\n    {\n        return $this-&gt;userId;\n    }\n\n    public function getEmail(): string\n    {\n        return $this-&gt;email;\n    }\n}\n</code></pre>"},{"location":"events/#creating-a-synchronous-event-listener","title":"Creating a Synchronous Event Listener","text":"<pre><code>/**\n * @implements EventListener&lt;UserRegisteredEvent&gt;\n */\nclass SendWelcomeEmailListener implements EventListener\n{\n    public function handle(Event $event): bool\n    {\n        if (!$event instanceof UserRegisteredEvent) {\n            return false;\n        }\n\n        // Send welcome email logic here\n        return true;\n    }\n}\n</code></pre>"},{"location":"events/#creating-a-queued-event-listener","title":"Creating a Queued Event Listener","text":"<pre><code>/**\n * @extends QueuedEventListener&lt;UserRegisteredEvent&gt;\n */\nclass ProcessUserDataListener extends QueuedEventListener\n{\n    protected string $queueName = 'user-processing';\n\n    public function handle(Event $event): bool\n    {\n        if (!$event instanceof UserRegisteredEvent) {\n            return false;\n        }\n\n        // Heavy processing logic here\n        return true;\n    }\n}\n</code></pre>"},{"location":"events/#registering-events-and-listeners","title":"Registering Events and Listeners","text":"<pre><code>// Register an event with its listeners\n$eventService-&gt;registerEvent(\n    UserRegisteredEvent::class,\n    [\n        SendWelcomeEmailListener::class,\n        ProcessUserDataListener::class,\n    ]\n);\n\n// Add a new listener to an existing event\n$eventService-&gt;addListener(\n    UserRegisteredEvent::class,\n    NewFeatureListener::class\n);\n</code></pre>"},{"location":"events/#dispatching-events","title":"Dispatching Events","text":"<pre><code>$event = new UserRegisteredEvent(123, 'user@example.com');\n$eventService-&gt;dispatch($event);\n</code></pre>"},{"location":"events/#application-integration","title":"Application Integration","text":"<p>Here are real examples from the WebFramework showing how events are used in practice:</p>"},{"location":"events/#user-login-events","title":"User Login Events","text":"<p>When a user successfully logs in, the framework dispatches a <code>UserLoggedIn</code> event:</p> <pre><code>$this-&gt;authenticationService-&gt;authenticate($user);\n$this-&gt;eventService-&gt;dispatch(new UserLoggedIn($user));\n</code></pre>"},{"location":"events/#password-change-events","title":"Password Change Events","text":"<p>When a user changes their password, a <code>UserPasswordChanged</code> event is dispatched:</p> <pre><code>$user-&gt;setSolidPassword($newHash);\n$this-&gt;userRepository-&gt;save($user);\n$this-&gt;eventService-&gt;dispatch(new UserPasswordChanged($user));\n</code></pre>"},{"location":"events/#email-change-events","title":"Email Change Events","text":"<p>When a user's email address is changed, a <code>UserEmailChanged</code> event is dispatched:</p> <pre><code>$user-&gt;setEmail($email);\n$this-&gt;userRepository-&gt;save($user);\n$this-&gt;eventService-&gt;dispatch(new UserEmailChanged($user));\n</code></pre>"},{"location":"events/#user-verification-events","title":"User Verification Events","text":"<p>When a user completes email verification, a <code>UserVerified</code> event is dispatched:</p> <pre><code>$user-&gt;setVerified();\n$this-&gt;userRepository-&gt;save($user);\n$this-&gt;eventService-&gt;dispatch(new UserVerified($user));\n</code></pre>"},{"location":"events/#queue-setup-for-asynchronous-events","title":"Queue Setup for Asynchronous Events","text":"<p>To use queued event listeners, you must:</p> <ol> <li>Register the EventJobHandler in your application configuration:</li> </ol> <pre><code>$queueService-&gt;registerJobHandler(EventJob::class, EventJobHandler::class);\n</code></pre> <ol> <li>Run queue workers to process the jobs:</li> </ol> <pre><code>php scripts/framework.php queue:worker\n</code></pre> <ol> <li>Configure queue names in your listeners:</li> </ol> <pre><code>class HeavyProcessingListener extends QueuedEventListener\n{\n    protected string $queueName = 'heavy-processing';\n}\n</code></pre> <p>Queued events will only be handled if you have a QueueWorker active and registered the EventJobHandler to handle EventJobs.</p>"},{"location":"events/#framework-events","title":"Framework Events","text":"<p>WebFramework itself will send out the following events:</p> <ul> <li>UserLoggedIn</li> <li>UserPasswordChanged</li> <li>UserVerified</li> <li>UserEmailChanged</li> </ul>"},{"location":"events/#error-handling-debugging","title":"Error Handling &amp; Debugging","text":""},{"location":"events/#unregistered-events","title":"Unregistered Events","text":"<p>If you dispatch an event that hasn't been registered, the EventService will log a debug message and silently continue:</p> <pre><code>// This will log: \"Cannot dispatch unregistered event\"\n$eventService-&gt;dispatch(new UnregisteredEvent());\n</code></pre>"},{"location":"events/#listener-errors","title":"Listener Errors","text":"<p>If a listener throws an exception, it will bubble up and stop processing of subsequent listeners. Wrap listener logic in try-catch blocks for graceful error handling:</p> <pre><code>public function handle(Event $event): bool\n{\n    try {\n        // Your event handling logic\n        return true;\n    } catch (\\Exception $e) {\n        $this-&gt;logger-&gt;error('Event handling failed', ['exception' =&gt; $e]);\n        return false;\n    }\n}\n</code></pre>"},{"location":"events/#debugging","title":"Debugging","text":"<p>Enable debug logging to see event dispatch activity: - Synchronous events: \"Dispatching non-queued event\" - Asynchronous events: \"Dispatching queued event\"</p>"},{"location":"events/#performance-considerations","title":"Performance Considerations","text":""},{"location":"events/#synchronous-vs-asynchronous-processing","title":"Synchronous vs Asynchronous Processing","text":"<ul> <li>Use synchronous listeners for lightweight operations that must complete immediately</li> <li>Use <code>QueuedEventListener</code> for heavy operations like email sending, file processing, or external API calls</li> <li>Synchronous listeners block the request until completion</li> <li>Queued listeners are processed asynchronously by queue workers</li> </ul>"},{"location":"events/#queue-configuration","title":"Queue Configuration","text":"<p>For queued events, ensure you have: 1. Queue workers running to process jobs 2. EventJobHandler registered with QueueService 3. Appropriate queue names for different types of processing</p>"},{"location":"events/#testing-event-driven-code","title":"Testing Event-Driven Code","text":""},{"location":"events/#testing-event-dispatch","title":"Testing Event Dispatch","text":"<pre><code>// Mock the EventService to verify events are dispatched\n$eventService = $this-&gt;createMock(EventService::class);\n$eventService-&gt;expects($this-&gt;once())\n    -&gt;method('dispatch')\n    -&gt;with($this-&gt;isInstanceOf(UserLoggedIn::class));\n</code></pre>"},{"location":"events/#testing-event-listeners","title":"Testing Event Listeners","text":"<pre><code>public function testUserLoggedInListener()\n{\n    $user = new User();\n    $event = new UserLoggedIn($user);\n    $listener = new MyEventListener();\n\n    $result = $listener-&gt;handle($event);\n\n    $this-&gt;assertTrue($result);\n}\n</code></pre>"},{"location":"events/#best-practices","title":"Best Practices","text":"<ol> <li>Keep events focused on a single state change</li> <li>Use descriptive event names that reflect past tense (e.g., <code>UserRegisteredEvent</code>)</li> <li>Include only necessary data in events</li> <li>Use queued listeners for time-consuming operations</li> <li>Implement proper error handling in listeners</li> <li>Consider using different queues for different types of listeners</li> <li>Monitor event processing and queue sizes</li> <li>Implement proper logging in event listeners   </li> </ol>"},{"location":"input-validation/","title":"Input Validation","text":"<p>This document provides a guide for developers on how to add input validation to a new action in the WebFramework. It leverages the <code>InputValidationService</code> and various validators to ensure that user input meets the required criteria before processing.</p>"},{"location":"input-validation/#steps-to-add-input-validation","title":"Steps to Add Input Validation","text":""},{"location":"input-validation/#1-define-your-action-class","title":"1. Define Your Action Class","text":"<p>Create a new action class in the <code>actions</code> directory. This class should implement the necessary logic for handling the request and response.</p>"},{"location":"input-validation/#2-inject-dependencies","title":"2. Inject Dependencies","text":"<p>In the constructor of your action class, inject the <code>InputValidationService</code> along with any other services you need. This service will be used to validate the input data.</p> <pre><code>use WebFramework\\Validation\\InputValidationService;\n\nclass YourNewAction\n{\n    public function __construct(\n        protected InputValidationService $inputValidationService,\n        // other dependencies...\n    ) {}\n}\n</code></pre>"},{"location":"input-validation/#3-define-validation-rules","title":"3. Define Validation Rules","text":"<p>Inside your action method (usually <code>__invoke</code>), define the validation rules for the input data. Use the appropriate validators for each field. For example, use <code>EmailValidator</code> for email fields, <code>PasswordValidator</code> for password fields, etc.</p> <pre><code>use WebFramework\\Validation\\Valdidator\\EmailValidator;\nuse WebFramework\\Validation\\Valdidator\\PasswordValidator;\n\n$validators = [\n    'email' =&gt; (new EmailValidator())-&gt;required(),\n    'password' =&gt; new PasswordValidator(),\n];\n</code></pre>"},{"location":"input-validation/#4-validate-input-data","title":"4. Validate Input Data","text":"<p>Use the <code>InputValidationService</code> to validate the input data against the defined rules. Pass the request parameters to the <code>validate</code> method.</p> <pre><code>$filtered = $this-&gt;inputValidationService-&gt;validate(\n    $validators,\n    $request-&gt;getParams()\n);\n</code></pre>"},{"location":"input-validation/#5-handle-validation-errors","title":"5. Handle Validation Errors","text":"<p>If validation fails, the <code>InputValidationService</code> will throw a <code>MultiValidationException</code>. Catch this exception and handle the errors appropriately, such as by adding error messages to the response.</p> <pre><code>use WebFramework\\Exception\\ValidationException;\n\ntry {\n    $filtered = $this-&gt;inputValidationService-&gt;validate(\n        $validators,\n        $request-&gt;getParams()\n    );\n    // Proceed with processing the validated data\n} catch (ValidationException $e) {\n    $this-&gt;messageService-&gt;addErrors($e-&gt;getErrors());\n    // Render the form again with error messages\n}\n</code></pre>"},{"location":"input-validation/#6-process-validated-data","title":"6. Process Validated Data","text":"<p>Once the data is validated, you can safely use the <code>$filtered</code> array to access the validated input values and proceed with your action's logic.</p> <pre><code>$email = $filtered['email'];\n$password = $filtered['password'];\n\n// Perform actions with validated data\n</code></pre>"},{"location":"input-validation/#example","title":"Example","text":"<p>Here's a simplified example of an action that validates an email and password:</p> <pre><code>use Psr\\Http\\Message\\ResponseInterface;\nuse Slim\\Http\\Response;\nuse Slim\\Http\\ServerRequest as Request;\nuse WebFramework\\Validation\\InputValidationService;\nuse WebFramework\\Validation\\Valdidator\\EmailValidator;\nuse WebFramework\\Validation\\Valdidator\\PasswordValidator;\nuse WebFramework\\Exception\\ValidationException;\n\nclass ExampleAction\n{\n    public function __construct(\n        protected InputValidationService $inputValidationService,\n        // other dependencies...\n    ) {}\n\n    public function __invoke(Request $request, Response $response, array $routeArgs): ResponseInterface\n    {\n        $validators = [\n            'email' =&gt; (new EmailValidator())-&gt;required(),\n            'password' =&gt; new PasswordValidator(),\n        ];\n\n        try {\n            $filtered = $this-&gt;inputValidationService-&gt;validate(\n                $validators,\n                $request-&gt;getParams()\n            );\n\n            // Use validated data\n            $email = $filtered['email'];\n            $password = $filtered['password'];\n\n            // Perform action logic...\n\n            return $response;\n        } catch (ValidationException $e) {\n            // Handle validation errors\n            return $response-&gt;withStatus(400);\n        }\n    }\n}\n</code></pre>"},{"location":"input-validation/#default-validators","title":"Default Validators","text":"<p>The WebFramework provides several default validators to handle common validation scenarios. Here's a list of the available validators:</p>"},{"location":"input-validation/#emailvalidator","title":"EmailValidator","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Valdidator\\EmailValidator</code></li> <li>Purpose: Validates email addresses.</li> <li>Usage: Ensures the input is a valid email format and optionally checks for a maximum length.</li> </ul>"},{"location":"input-validation/#example_1","title":"Example","text":"<pre><code>$validators = ['email' =&gt; (new EmailValidator())-&gt;required()];\n</code></pre>"},{"location":"input-validation/#passwordvalidator","title":"PasswordValidator","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Valdidator\\PasswordValidator</code></li> <li>Purpose: Validates passwords.</li> <li>Usage: Ensures the input meets password requirements, such as being non-empty.</li> </ul>"},{"location":"input-validation/#example_2","title":"Example","text":"<pre><code>$validators = ['password' =&gt; new PasswordValidator()];\n</code></pre>"},{"location":"input-validation/#usernamevalidator","title":"UsernameValidator","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Valdidator\\UsernameValidator</code></li> <li>Purpose: Validates usernames.</li> <li>Usage: Ensures the input is a valid username format and optionally checks for a maximum length.</li> </ul>"},{"location":"input-validation/#example_3","title":"Example","text":"<pre><code>$validators = ['username' =&gt; (new UsernameValidator())-&gt;required()];\n</code></pre>"},{"location":"input-validation/#customboolvalidator","title":"CustomBoolValidator","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Valdidator\\CustomBoolValidator</code></li> <li>Purpose: Validates boolean values.</li> <li>Usage: Ensures the input is either '0', '1', 'true', or 'false'.</li> </ul>"},{"location":"input-validation/#example_4","title":"Example","text":"<pre><code>$validators = ['accept_terms' =&gt; (new CustomBoolValidator('accept_terms'))-&gt;required()];\n</code></pre>"},{"location":"input-validation/#customnumbervalidator","title":"CustomNumberValidator","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Valdidator\\CustomNumberValidator</code></li> <li>Purpose: Validates numeric values.</li> <li>Usage: Ensures the input is a number and optionally checks for minimum and maximum values.</li> </ul>"},{"location":"input-validation/#example_5","title":"Example","text":"<pre><code>$validators = ['age' =&gt; (new CustomNumberValidator('age'))-&gt;minValue(18)-&gt;maxValue(99)];\n</code></pre>"},{"location":"input-validation/#idvalidator","title":"IdValidator","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Valdidator\\IdValidator</code></li> <li>Purpose: Validates ID fields.</li> <li>Usage: Ensures the input is a valid ID format and can be converted to an integer.</li> </ul>"},{"location":"input-validation/#example_6","title":"Example","text":"<pre><code>$validators = ['user_id' =&gt; (new IdValidator('user_id'))-&gt;required()];\n</code></pre>"},{"location":"input-validation/#urlvalidator","title":"UrlValidator","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Valdidator\\UrlValidator</code></li> <li>Purpose: Validates Url fields.</li> <li>Usage: Ensures the input is a valid Url format.</li> </ul>"},{"location":"input-validation/#example_7","title":"Example","text":"<pre><code>$validators = ['url' =&gt; (new UrlValidator('url'))-&gt;required()];\n</code></pre>"},{"location":"input-validation/#using-customvalidator","title":"Using CustomValidator","text":"<p>The <code>WebFramework\\Validation\\Valdidator\\CustomValidator</code> class is a flexible validator that can be extended to create custom validation logic. It provides basic validation functionality and can be configured with various rules.</p>"},{"location":"input-validation/#key-features","title":"Key Features","text":"<ul> <li>Filter: Apply a regex filter to the input.</li> <li>Required: Mark the field as required.</li> <li>Min/Max Length: Set minimum and maximum length constraints.</li> <li>Default Value: Specify a default value if the input is empty.</li> </ul>"},{"location":"input-validation/#example-usage","title":"Example Usage","text":"<p>To create a custom validator, extend the <code>CustomValidator</code> class and define your validation logic:</p> <pre><code>use WebFramework\\Validation\\CustomValidator;\n\nclass MyCustomValidator extends CustomValidator\n{\n    public function __construct(string $name)\n    {\n        parent::__construct($name);\n        $this-&gt;filter('my_custom_regex')-&gt;required()-&gt;maxLength(100);\n    }\n\n    public function getTyped(string $value): mixed\n    {\n        // Custom conversion logic\n        return strtoupper($value);\n    }\n}\n</code></pre>"},{"location":"input-validation/#validation-rules","title":"Validation Rules","text":"<p>The WebFramework includes several implementations of the <code>ValidationRule</code> interface, which are used to define specific validation criteria for input data. Here are the available rules:</p>"},{"location":"input-validation/#filterrule","title":"FilterRule","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Rule\\FilterRule</code></li> <li>Purpose: Provides regex-based filtering.</li> <li>Usage: Ensures the input matches a specified regular expression.</li> </ul>"},{"location":"input-validation/#maxlengthrule","title":"MaxLengthRule","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Rule\\MaxLengthRule</code></li> <li>Purpose: Validates maximum length.</li> <li>Usage: Ensures the input does not exceed a specified length.</li> </ul>"},{"location":"input-validation/#minlengthrule","title":"MinLengthRule","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Rule\\MinLengthRule</code></li> <li>Purpose: Validates minimum length.</li> <li>Usage: Ensures the input meets a specified minimum length.</li> </ul>"},{"location":"input-validation/#maxvaluerule","title":"MaxValueRule","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Rule\\MaxValueRule</code></li> <li>Purpose: Validates maximum value.</li> <li>Usage: Ensures the input does not exceed a specified value.</li> </ul>"},{"location":"input-validation/#minvaluerule","title":"MinValueRule","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Rule\\MinValueRule</code></li> <li>Purpose: Validates minimum value.</li> <li>Usage: Ensures the input meets a specified minimum value.</li> </ul>"},{"location":"input-validation/#urlrule","title":"UrlRule","text":"<ul> <li>Class: <code>WebFramework\\Validation\\Rule\\UrlRule</code></li> <li>Purpose: Validates an url structure.</li> <li>Usage: Ensures the input is an url.</li> </ul> <p>These rules can be used in conjunction with validators to enforce specific constraints on input data, ensuring that it meets the required criteria before being processed.</p>"},{"location":"instrumentation/","title":"Instrumentation","text":"<p>This document provides a guide for developers on the instrumentation system in WebFramework. Instrumentation is used to monitor and measure the performance of your application, allowing you to identify bottlenecks and optimize performance.</p>"},{"location":"instrumentation/#overview","title":"Overview","text":"<p>Instrumentation in WebFramework is designed to track the execution time of various parts of your application. It is implemented using the <code>Instrumentation</code> interface, which provides methods for starting and finishing spans and transactions.</p>"},{"location":"instrumentation/#when-to-use-instrumentation","title":"When to Use Instrumentation","text":"<p>Instrumentation is useful in scenarios where you need to monitor the performance of your application, such as:</p> <ul> <li>Identifying slow database queries or external API calls.</li> <li>Measuring the execution time of specific actions or middleware.</li> <li>Tracking the overall performance of your application in production.</li> </ul>"},{"location":"instrumentation/#adding-instrumentation-to-your-classes","title":"Adding Instrumentation to Your Classes","text":"<p>To add instrumentation to your own classes, you need to inject the <code>Instrumentation</code> service and use its methods to start and finish spans.</p>"},{"location":"instrumentation/#example-usage","title":"Example Usage","text":"<pre><code>use WebFramework\\Diagnostics\\Instrumentation;\n\nclass ExampleService\n{\n    public function __construct(\n        private Instrumentation $instrumentation,\n    ) {}\n\n    public function performTask(): void\n    {\n        $span = $this-&gt;instrumentation-&gt;startSpan('example.perform_task');\n\n        // Perform the task...\n\n        $this-&gt;instrumentation-&gt;finishSpan($span);\n    }\n}\n</code></pre> <p>In this example, the <code>ExampleService</code> uses the <code>Instrumentation</code> service to measure the execution time of the <code>performTask</code> method.</p>"},{"location":"instrumentation/#existing-instrumentation-locations","title":"Existing Instrumentation Locations","text":"<p>Instrumentation is already used in various parts of the WebFramework to measure the speed of actions and middleware. Here are some key locations:</p> <ul> <li>SlimAppTask: Measures the time taken to handle a request in the Slim application.</li> <li>InstrumentationMiddleware: Measures the time taken to process each request.</li> <li>SanityCheckRunner: Measures the time taken to execute sanity checks.</li> <li>CaptchaService: Measures the time taken to validate captchas.</li> <li>LatteRenderService: Measures the time taken to render templates using Latte.</li> <li>PostmarkMailService: Measures the time taken to send emails using Postmark.</li> <li>RedisCache: Measures the time taken for cache operations using Redis.</li> <li>MysqliDatabase: Measures the time taken for database queries using MySQLi.</li> </ul>"},{"location":"instrumentation/#writing-a-custom-instrumentation-handler","title":"Writing a Custom Instrumentation Handler","text":"<p>To write a custom instrumentation handler, you need to implement the <code>Instrumentation</code> interface. This interface defines the methods required for starting and finishing spans and transactions.</p>"},{"location":"instrumentation/#example-custom-instrumentation-handler","title":"Example Custom Instrumentation Handler","text":"<pre><code>namespace App\\Instrumentation;\n\nuse WebFramework\\Diagnostics\\Instrumentation;\n\nclass CustomInstrumentation implements Instrumentation\n{\n    public function startTransaction(string $name, string $operation): mixed\n    {\n        // Start a new transaction with the given name and operation\n        // Return a transaction object or identifier\n    }\n\n    public function finishTransaction(mixed $transaction): void\n    {\n        // Finish the given transaction\n    }\n\n    public function startSpan(string $name): mixed\n    {\n        // Start a new span with the given name\n        // Return a span object or identifier\n    }\n\n    public function finishSpan(mixed $span): void\n    {\n        // Finish the given span\n    }\n\n    public function getCurrentTransaction(): mixed\n    {\n        // Return the current transaction object or identifier\n    }\n\n    public function setTransactionName(mixed $transaction, string $name): void\n    {\n        // Set the name of the given transaction\n    }\n}\n</code></pre>"},{"location":"instrumentation/#integrating-the-custom-handler","title":"Integrating the Custom Handler","text":"<p>Once you have implemented your custom instrumentation handler, you need to register it in your dependency injection container. </p>"},{"location":"logging/","title":"Logging","text":"<p>WebFramework offers a flexible logging system that revolves around PSR-3 loggers, channels, and the <code>ChannelManager</code>. This document explains how to work with loggers, how default channels are wired, and how you can override or introduce additional channels.</p> <p>Monolog is used as the underlying logging library and included by default.</p>"},{"location":"logging/#channelmanager-and-logservice","title":"ChannelManager and LogService","text":"<p>The <code>WebFramework\\\\Logging\\\\ChannelManager</code> resolves loggers by channel name. It uses the dependency injection container to look up services and caches resolved loggers for reuse. When no matching logger can be found the manager falls back to a <code>NullLogger</code>, so logging calls never break your application.</p> <p><code>WebFramework\\\\Logging\\\\LogService</code> is a convenience wrapper that mirrors the PSR-3 logging methods. You pass the channel name as the first argument and the message/level follows the usual PSR-3 signature:</p> <pre><code>use WebFramework\\Logging\\LogService;\n\nclass InvoiceService\n{\n    public function __construct(private LogService $logService) {}\n\n    public function createInvoice(): void\n    {\n        $this-&gt;logService-&gt;info('billing', 'Invoice created', ['customer' =&gt; 123]);\n    }\n}\n</code></pre> <p>It provides all the usual PSR-3 logging methods in this way with the channel name as the first argument: <code>log</code>, <code>emergency</code>, <code>alert</code>, <code>critical</code>, <code>error</code>, <code>warning</code>, <code>notice</code>, <code>info</code>, and <code>debug</code>.</p>"},{"location":"logging/#example-usage","title":"Example Usage","text":"<p>To use the default channel in your class, you can just inject <code>LoggerInterface</code> and use its methods, as LoggerInterface is mapped to retrieve the default channel in the container:</p> <pre><code>use Psr\\Log\\LoggerInterface;\n\nclass ExampleService\n{\n    public function __construct(private LoggerInterface $logger) {}\n\n    public function logInfo(): void\n    {\n        $this-&gt;logger-&gt;info('Invoice created', ['customer' =&gt; 123]);\n    }\n}\n</code></pre> <p>To be able to send messages to other channels, you can inject <code>LogService</code> and use its methods:</p> <pre><code>use WebFramework\\Logging\\LogService;\n\nclass ExampleService\n{\n    public function __construct(private LogService $logService) {}\n\n    public function logInfo(): void\n    {\n        $this-&gt;logService-&gt;info('billing', 'Invoice created', ['customer' =&gt; 123]);\n    }\n}\n</code></pre>"},{"location":"logging/#default-channels","title":"Default Channels","text":"<p>Out of the box, WebFramework provides two channels, for which it provides default definition placeholders in <code>definitions/definitions.php</code>:</p> <ul> <li><code>channels.default</code></li> <li><code>channels.exception</code></li> </ul> <p>Both are bound to the <code>NullLogger</code>.</p> <p>To define the Logger for these (and other) channels, you can override the definition in your definitions file (e.g. <code>definitions/app_definitions.php</code>).</p>"},{"location":"logging/#adding-or-replacing-channel-definitions","title":"Adding or Replacing Channel Definitions","text":"<p>Channel definitions live in the dependency injection container. By convention they use the <code>channels.*</code> naming scheme. Each definition must return a <code>Psr\\Log\\LoggerInterface</code>. For example:</p> <pre><code>use Monolog\\Handler\\StreamHandler;\nuse Monolog\\Level;\nuse Monolog\\Logger;\n\nreturn [\n    'channels.default' =&gt; function (): Logger {\n        $logger = new Logger('default');\n        $logger-&gt;pushHandler(new StreamHandler('/var/log/app.log', Level::Info));\n\n        return $logger;\n    },\n    'channels.billing' =&gt; function (): Logger {\n        $logger = new Logger('billing');\n        $logger-&gt;pushHandler(new StreamHandler('/var/log/billing.log', Level::Debug));\n\n        return $logger;\n    },\n];\n</code></pre> <p>Once such definitions exist, the <code>ChannelManager</code> can resolve the channel by asking the container for the corresponding service.</p>"},{"location":"logging/#overriding-channels-via-configuration","title":"Overriding Channels Via Configuration","text":"<p>The effective channels are determined by the <code>logging.channels</code> section in your configuration (see <code>config/base_config.php</code>). Each entry maps a channel name to a container id or to an inline configuration array:</p> <pre><code>return [\n    'logging' =&gt; [\n        'channels' =&gt; [\n            'default' =&gt; 'channels.default',\n            'exception' =&gt; [\n                'type' =&gt; 'file',\n                'path' =&gt; '/tmp/app-exceptions.log',\n                'level' =&gt; \\Monolog\\Level::Error,\n            ],\n        ],\n    ],\n];\n</code></pre> <ul> <li>If the value is a string, the manager asks the container for that service id.</li> <li>If the value is an array with <code>type =&gt; 'file'</code>, the manager creates a <code>Monolog\\Logger</code> on the fly that writes to <code>path</code> with an optional <code>level</code> (defaults to <code>Level::Debug</code>).</li> </ul> <p>This mechanism lets you temporarily override a definition\u2014handy for local debugging or when you want a different logger in production\u2014without touching the DI definitions themselves. Changing the mapping to reference another definition immediately redirects the channel to that logger.</p>"},{"location":"logging/#fallback-behaviour","title":"Fallback Behaviour","text":"<p>When neither the configuration nor the container can supply a logger for a channel, the manager returns a <code>NullLogger</code>. This guarantees that logging is safe even while you are still wiring channels.</p> <p>With these tools you can keep the framework supplied <code>LoggerInterface</code> for generic logging, add specialised channels for specific domains, and override them per environment whenever needed.</p>"},{"location":"middlewares/","title":"Middleware Management","text":"<p>This document provides a guide for developers on how to define and use middleware in the WebFramework. Middleware is used to process requests and responses in a Slim application, allowing you to add functionality such as authentication, logging, and error handling.</p>"},{"location":"middlewares/#defining-middleware-in-configuration","title":"Defining Middleware in Configuration","text":"<p>Middleware is defined in the configuration file under the <code>middlewares</code> key. The configuration is divided into two sections: <code>pre_routing</code> and <code>post_routing</code>.</p> <ul> <li> <p><code>pre_routing</code>: Middleware in this section is executed before the routing process receives the request and after the routing process has handled the request. It is therefore mainly used to catch errors that occur during routing or in the middlewares after routing.</p> </li> <li> <p><code>post_routing</code>: Middleware in this section is executed after the routing process. It is used for tasks that need to be completed after determining which action to route to, such as starting a session or handling security.</p> </li> </ul>"},{"location":"middlewares/#middleware-order","title":"Middleware Order","text":"<p>Middleware is executed in the order it is defined in the configuration file. The first middleware in the list is the last to be executed (end of the stack), and the last middleware in the list is the first to be executed (start of the stack). This means that middleware is entered and exited in a Last-In-First-Out (LIFO) order.</p> <p>During routing route-specific middleware, such as LoggedInMiddleware or AdminUserMiddleware can be added on top of the post_routing list.</p>"},{"location":"middlewares/#example-configuration","title":"Example Configuration","text":"<p>Most applications will use the following configuration:</p> <pre><code>'pre_routing' =&gt; [\n    // End of stack\n    ErrorRedirectMiddleware::class,\n    // Start of stack\n],\n'post_routing' =&gt; [\n    // End of stack\n    RequestServiceMiddleware::class,\n    SecurityHeadersMiddleware::class,\n    MessageMiddleware::class,\n    JsonParserMiddleware::class,\n    BlacklistMiddleware::class,\n    CsrfValidationMiddleware::class,\n    AuthenticationMiddleware::class,\n    IpMiddleware::class,\n    SessionStartMiddleware::class,\n    // Start of stack\n],\n</code></pre> <p>In this configuration, <code>ErrorRedirectMiddleware</code> is executed first in the <code>pre_routing</code> stack, and <code>SessionStartMiddleware</code> is executed first in the <code>post_routing</code> stack.</p>"},{"location":"middlewares/#routing-and-middleware","title":"Routing and Middleware","text":"<p>Routing is done between the <code>pre_routing</code> and <code>post_routing</code> middleware stacks by the <code>RoutingMiddleware</code> of the Slim framework. The first entry of <code>post_routing</code> will call the actual action routed to.</p>"},{"location":"middlewares/#purpose-of-standard-middleware-implementations","title":"Purpose of Standard Middleware Implementations","text":"<p>Here is a description of the purpose of each standard middleware implementation:</p>"},{"location":"middlewares/#errorredirectmiddleware","title":"ErrorRedirectMiddleware","text":"<ul> <li>Purpose: Handles errors and exceptions by redirecting to appropriate error pages or handling exceptions gracefully.</li> </ul>"},{"location":"middlewares/#authenticationmiddleware","title":"AuthenticationMiddleware","text":"<ul> <li>Purpose: Determines if there is an authenticated user and adds the info the the request attributes.</li> </ul>"},{"location":"middlewares/#transactionmiddleware","title":"TransactionMiddleware","text":"<ul> <li>Purpose: Ensures that the request is wrapped in a database transaction, committing the transaction if the request is successful or rolling it back if an error occurs.</li> </ul>"},{"location":"middlewares/#securityheadersmiddleware","title":"SecurityHeadersMiddleware","text":"<ul> <li>Purpose: Adds security headers to the response, such as <code>X-Frame-Options</code> to prevent clickjacking and a random header to mitigate BREACH attacks.</li> </ul>"},{"location":"middlewares/#messagemiddleware","title":"MessageMiddleware","text":"<ul> <li>Purpose: Handles messages passed via URL parameters, adding them to the message service for display to the user.</li> </ul>"},{"location":"middlewares/#jsonparsermiddleware","title":"JsonParserMiddleware","text":"<ul> <li>Purpose: Parses JSON request bodies and adds the parsed data to the request attributes for easy access.</li> </ul>"},{"location":"middlewares/#blacklistmiddleware","title":"BlacklistMiddleware","text":"<ul> <li>Purpose: Checks if a request is blacklisted based on IP address or user ID, throwing a <code>BlacklistException</code> if the request is blacklisted.</li> </ul>"},{"location":"middlewares/#csrfvalidationmiddleware","title":"CsrfValidationMiddleware","text":"<ul> <li>Purpose: Validates CSRF tokens to protect against cross-site request forgery attacks, adding an error message if validation fails.</li> </ul>"},{"location":"middlewares/#ipmiddleware","title":"IpMiddleware","text":"<ul> <li>Purpose: Adds the client IP address to the request attributes for use in other middleware or actions.</li> </ul>"},{"location":"middlewares/#sessionstartmiddleware","title":"SessionStartMiddleware","text":"<ul> <li>Purpose: Starts a session for the request, allowing session data to be accessed and modified during the request lifecycle.</li> </ul>"},{"location":"middlewares/#loggedinmiddleware","title":"LoggedInMiddleware","text":"<ul> <li>Purpose: Checks if there is an authenticated user or throw an exception if not.</li> </ul>"},{"location":"middlewares/#adminusermiddleware","title":"AdminUserMiddleware","text":"<ul> <li>Purpose: Checks is there is an authenticated admin user or throw an exception if not.</li> </ul>"},{"location":"middlewares/#requestservicemiddleware","title":"RequestServiceMiddleware","text":"<ul> <li>Purpose: Store the current request in the RequestService for use in the application.</li> </ul>"},{"location":"new-entity/","title":"Creating a new Entity","text":"<p>This document provides a guide for developers on how to create a new Entity class in the WebFramework. Entities are objects that represent data in the application and are persisted to the database. They should not contain any business logic, only data and methods for accessing and manipulating that data.</p>"},{"location":"new-entity/#steps-to-create-a-new-entity","title":"Steps to Create a New Entity","text":"<ol> <li> <p>Define the Entity Class: Create a new class that extends <code>EntityCore</code> and implements the necessary methods and properties.</p> </li> <li> <p>Define the Repository Class: Create a new class that extends <code>RepositoryCore</code> and provides methods for accessing and manipulating the entity data.</p> </li> <li> <p>Create the Database Table: Define a new database table that matches the structure of the entity.</p> </li> </ol>"},{"location":"new-entity/#example-creating-a-car-entity","title":"Example: Creating a <code>Car</code> Entity","text":""},{"location":"new-entity/#step-1-define-the-car-entity-class","title":"Step 1: Define the <code>Car</code> Entity Class","text":"<p>Create a new class <code>Car</code> that extends <code>EntityCore</code>. Define the properties and methods for accessing and manipulating the data.</p> <pre><code>&lt;?php\n\nnamespace WebFramework\\Entity;\n\nuse WebFramework\\Entity\\EntityCore;\n\n/**\n * Represents a car in the system.\n */\nclass Car extends EntityCore\n{\n    protected static string $tableName = 'cars';\n    protected static array $baseFields = ['make', 'model', 'year', 'color'];\n    protected static array $privateFields = [];\n\n    protected int $id;\n    protected string $make = '';\n    protected string $model = '';\n    protected int $year = 0;\n    protected string $color = '';\n\n    public function getId(): int\n    {\n        return $this-&gt;id;\n    }\n\n    public function getMake(): string\n    {\n        return $this-&gt;make;\n    }\n\n    public function setMake(string $make): void\n    {\n        $this-&gt;make = $make;\n    }\n\n    public function getModel(): string\n    {\n        return $this-&gt;model;\n    }\n\n    public function setModel(string $model): void\n    {\n        $this-&gt;model = $model;\n    }\n\n    public function getYear(): int\n    {\n        return $this-&gt;year;\n    }\n\n    public function setYear(int $year): void\n    {\n        $this-&gt;year = $year;\n    }\n\n    public function getColor(): string\n    {\n        return $this-&gt;color;\n    }\n\n    public function setColor(string $color): void\n    {\n        $this-&gt;color = $color;\n    }\n}\n</code></pre>"},{"location":"new-entity/#step-2-define-the-carrepository-class","title":"Step 2: Define the <code>CarRepository</code> Class","text":"<p>Create a new class <code>CarRepository</code> that extends <code>RepositoryCore</code>. Implement methods for accessing and manipulating <code>Car</code> entities.</p> <pre><code>&lt;?php\n\nnamespace WebFramework\\Repository;\n\nuse WebFramework\\Entity\\EntityCollection;\nuse WebFramework\\Repository\\RepositoryCore;\nuse WebFramework\\Entity\\Car;\n\n/**\n * Repository class for Car entities.\n *\n * @extends RepositoryCore&lt;Car&gt;\n */\nclass CarRepository extends RepositoryCore\n{\n    /** @var class-string&lt;Car&gt; The entity class associated with this repository */\n    protected static string $entityClass = Car::class;\n\n    /**\n     * Get a Car entity by make and model.\n     *\n     * @param string $make  The make of the car\n     * @param string $model The model of the car\n     *\n     * @return null|Car The Car entity if found, null otherwise\n     */\n    public function getCarByMakeAndModel(string $make, string $model): ?Car\n    {\n        return $this-&gt;getObject(['make' =&gt; $make, 'model' =&gt; $model]);\n    }\n\n    /**\n     * Search for cars based on a string.\n     *\n     * @param string $string The search string\n     *\n     * @return EntityCollection&lt;Car&gt; A collection of matching Car entities\n     */\n    public function searchCars(string $string): EntityCollection\n    {\n        $query = &lt;&lt;&lt;'SQL'\n        SELECT id\n        FROM cars\n        WHERE make LIKE ? OR\n              model LIKE ? OR\n              color LIKE ?\nSQL;\n\n        $result = $this-&gt;database-&gt;query($query, [\n            \"%{$string}%\",\n            \"%{$string}%\",\n            \"%{$string}%\",\n        ], 'Failed to search cars');\n\n        $data = [];\n        foreach ($result as $row)\n        {\n            $car = $this-&gt;getObjectById($row['id']);\n\n            if ($car === null)\n            {\n                throw new \\RuntimeException('Failed to retrieve car');\n            }\n\n            $data[] = $car;\n        }\n\n        return new EntityCollection($data);\n    }\n}\n</code></pre>"},{"location":"new-entity/#step-3-create-the-database-table","title":"Step 3: Create the Database Table","text":"<p>Define a new database table <code>cars</code> that matches the structure of the <code>Car</code> entity. This is typically done through a database migration. The <code>DatabaseManager</code> class is used to manage database schema changes.</p> <p>Check out the Database Migrations documentation for more information on how to create and apply database migrations.</p> <p>The migration file uses a timestamp-based system with <code>up</code> and <code>down</code> directions. The <code>up</code> actions contain the schema changes to apply the migration, while the <code>down</code> actions contain the changes to rollback the migration. The timestamp in the filename ensures migrations are applied in chronological order, and the migrations table automatically tracks which migrations have been executed.</p> <p>You don't need to include a field for the <code>id</code> column in the <code>actions</code> array, as it will be added automatically.</p> <p>To perform the migration you would typically run the new migration command by executing <code>php Framework db:migrate</code> in the console of your system.</p>"},{"location":"new-entity/#example-migration-file","title":"Example Migration File","text":"<pre><code>&lt;?php\n\nreturn [\n    'up' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'create_table',\n                'table_name' =&gt; 'cars',\n                'fields' =&gt; [\n                    [\n                        'name' =&gt; 'make',\n                        'type' =&gt; 'varchar',\n                        'size' =&gt; 255,\n                        'null' =&gt; false,\n                    ],\n                    [\n                        'name' =&gt; 'model',\n                        'type' =&gt; 'varchar',\n                        'size' =&gt; 255,\n                        'null' =&gt; false,\n                    ],\n                    [\n                        'name' =&gt; 'year',\n                        'type' =&gt; 'int',\n                        'null' =&gt; false,\n                    ],\n                    [\n                        'name' =&gt; 'color',\n                        'type' =&gt; 'varchar',\n                        'size' =&gt; 255,\n                        'null' =&gt; false,\n                    ],\n                ],\n                'constraints' =&gt; [],\n            ],\n        ],\n    ],\n    'down' =&gt; [\n        'actions' =&gt; [\n            [\n                'type' =&gt; 'raw_query',\n                'query' =&gt; 'DROP TABLE IF EXISTS `cars`',\n                'params' =&gt; [],\n            ],\n        ],\n    ],\n];\n</code></pre>"},{"location":"queueing/","title":"Queueing System","text":"<p>The WebFramework provides a flexible queueing system for handling background jobs. This system allows you to process tasks asynchronously, improving application responsiveness.</p>"},{"location":"queueing/#core-components","title":"Core Components","text":""},{"location":"queueing/#queueservice","title":"QueueService","text":"<p>The <code>QueueService</code> is the central manager for all queues in the application. It provides methods to:</p> <ul> <li>Register queues</li> <li>Dispatch jobs</li> <li>Get queue statistics</li> <li>Register job handlers</li> <li>Process jobs</li> </ul>"},{"location":"queueing/#queue-interface","title":"Queue Interface","text":"<p>The <code>Queue</code> interface defines the contract that all queue implementations must follow:</p> <pre><code>interface Queue\n{\n    public function dispatch(Job $job, int $delay = 0): void;\n    public function count(): int;\n    public function popJob(): ?Job;\n    public function getName(): string;\n    public function clear(): void;\n}\n</code></pre>"},{"location":"queueing/#job-interface","title":"Job Interface","text":"<p>Jobs are simple data containers that implement the <code>Job</code> interface. They should contain only the data needed to perform the task, not the logic.</p>"},{"location":"queueing/#jobhandler-interface","title":"JobHandler Interface","text":"<p>Job handlers implement the <code>JobHandler</code> interface and contain the actual logic for processing jobs:</p> <pre><code>interface JobHandler\n{\n    public function handle(Job $job): bool;\n}\n</code></pre>"},{"location":"queueing/#usage","title":"Usage","text":""},{"location":"queueing/#registering-a-queue","title":"Registering a Queue","text":"<pre><code>$queueService-&gt;register('email', $emailQueue, true); // true makes it the default queue\n</code></pre>"},{"location":"queueing/#creating-a-job","title":"Creating a Job","text":"<pre><code>class SendEmailJob implements Job\n{\n    public function __construct(\n        private string $to,\n        private string $subject,\n        private string $body\n    ) {}\n}\n</code></pre>"},{"location":"queueing/#creating-a-job-handler","title":"Creating a Job Handler","text":"<pre><code>/**\n * @implements JobHandler&lt;SendMailJob&gt;\n */\nclass SendEmailJobHandler implements JobHandler\n{\n    public function handle(Job $job): bool\n    {\n        if (!$job instanceof SendEmailJob) {\n            return false;\n        }\n\n        // Send email logic here\n        return true;\n    }\n}\n</code></pre>"},{"location":"queueing/#registering-a-job-handler","title":"Registering a Job Handler","text":"<pre><code>$queueService-&gt;registerJobHandler(SendEmailJob::class, SendEmailJobHandler::class);\n</code></pre>"},{"location":"queueing/#dispatching-a-job","title":"Dispatching a Job","text":"<pre><code>$job = new SendEmailJob('user@example.com', 'Hello', 'Welcome!');\n$queueService-&gt;dispatch($job); // Uses default queue\n$queueService-&gt;dispatch($job, 'email', 60); // Uses 'email' queue with 60 second delay\n</code></pre>"},{"location":"queueing/#running-a-queue-worker","title":"Running a Queue Worker","text":"<p>Queue workers can be started using the console command:</p> <pre><code>php console.php queue:worker email --max-jobs=100 --max-runtime=3600\n</code></pre> <p>Options: - <code>--max-jobs</code>: Maximum number of jobs to process before stopping - <code>--max-runtime</code>: Maximum runtime in seconds before stopping</p>"},{"location":"queueing/#built-in-implementations","title":"Built-in Implementations","text":""},{"location":"queueing/#memoryqueue","title":"MemoryQueue","text":"<p>The <code>MemoryQueue</code> is a simple in-memory queue implementation suitable for development and testing. It is not persistent and will lose all data when the server restarts.</p>"},{"location":"queueing/#redisqueue","title":"RedisQueue","text":"<p>The <code>RedisQueue</code> is implemented in the web-framework-redis module. Persistency depends on your configuration of Redis, but it's shareable between multiple instantiations and / or servers.</p>"},{"location":"queueing/#best-practices","title":"Best Practices","text":"<ol> <li>Keep jobs small and focused on a single task</li> <li>Use job handlers for the actual processing logic</li> <li>Implement proper error handling in job handlers</li> <li>Use appropriate queue names for different types of jobs</li> <li>Consider using delays for non-urgent tasks</li> <li>Monitor queue sizes and processing times</li> <li>Implement proper logging in job handlers </li> </ol>"},{"location":"routing/","title":"Routing","text":"<p>This document provides a guide for developers on how to set up routes in the WebFramework. Routes define the endpoints of your application and map them to specific actions or controllers. WebFramework uses the Slim framework for request handling. So the basic routing rules are defined in the Slim framework documentation.</p>"},{"location":"routing/#setting-up-routes","title":"Setting Up Routes","text":"<p>Routes are defined in the configuration under the <code>routes</code> key. The configuration specifies the route classes to load, which are responsible for registering the routes with the Slim application.</p>"},{"location":"routing/#configuration","title":"Configuration","text":"<p>In your <code>config/config.php</code> file, specify the route classes to load:</p> <pre><code>&lt;?php\n\nreturn [\n    // Other configuration settings...\n\n    'routes' =&gt; [\n        \\App\\Routes\\Unauthenticated::class,\n        \\App\\Routes\\Authenticated::class,\n    ],\n];\n</code></pre>"},{"location":"routing/#route-classes","title":"Route Classes","text":"<p>Route classes should implement the <code>RouteSet</code> interface and are usually placed in the <code>routes</code> directory. But you could place them anywhere you want as long as you configure Composer and the autoloader can find them. Each route class is responsible for registering its routes with the Slim application.</p>"},{"location":"routing/#example-unauthenticated-routes","title":"Example: Unauthenticated Routes","text":"<p>Here's an example of a route class for unauthenticated routes using the basic WebFramework actions for authentication. You don't need to use these actions, but they provide a good starting point.</p> <pre><code>&lt;?php\n\nnamespace App\\Routes;\n\nuse Slim\\App;\nuse WebFramework\\Http\\RouteSet;\n\nclass Unauthenticated implements RouteSet\n{\n    public function register(App $app): void\n    {\n        // Login / verification related\n        //\n        $app-&gt;get('/login', \\WebFramework\\Actions\\Login::class);\n        $app-&gt;post('/login', \\WebFramework\\Actions\\Login::class);\n\n        $app-&gt;get('/logoff', \\WebFramework\\Actions\\Logoff::class);\n\n        $app-&gt;get('/send-verify', \\WebFramework\\Actions\\SendVerify::class);\n        $app-&gt;get('/verify', \\WebFramework\\Actions\\Verify::class);\n        $app-&gt;get('/change-email-verify', \\WebFramework\\Actions\\ChangeEmailVerify::class);\n\n        $app-&gt;get('/forgot-password', \\WebFramework\\Actions\\ForgotPassword::class);\n        $app-&gt;post('/forgot-password', \\WebFramework\\Actions\\ForgotPassword::class);\n\n        $app-&gt;get('/reset-password', \\WebFramework\\Actions\\ResetPassword::class);\n\n        // Registration related\n        //\n        $app-&gt;get('/register', \\WebFramework\\Actions\\Register::class);\n    }\n}\n</code></pre>"},{"location":"routing/#example-authenticated-routes","title":"Example: Authenticated Routes","text":"<p>For authenticated routes, you can create a middleware to ensure that the user is logged in before accessing certain routes.</p>"},{"location":"routing/#loggedinmiddleware","title":"LoggedInMiddleware","text":"<p>Here's an example of a <code>LoggedInMiddleware</code> class that checks if a user is authenticated:</p> <pre><code>&lt;?php\n\nnamespace App\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse Slim\\Exception\\HttpUnauthorizedException;\nuse WebFramework\\Security\\AuthenticationService;\n\nclass LoggedInMiddleware implements MiddlewareInterface\n{\n    public function __construct(\n        private AuthenticationService $authenticationService,\n    ) {}\n\n    public function process(Request $request, RequestHandlerInterface $handler): Response\n    {\n        if (!$this-&gt;authenticationService-&gt;isAuthenticated())\n        {\n            throw new HttpUnauthorizedException($request);\n        }\n\n        return $handler-&gt;handle($request);\n    }\n}\n</code></pre>"},{"location":"routing/#authenticated-route-group","title":"Authenticated Route Group","text":"<p>You can then create a route group for authenticated routes, using the <code>LoggedInMiddleware</code> to protect the routes:</p> <pre><code>&lt;?php\n\nnamespace App\\Routes;\n\nuse App\\Middleware\\LoggedInMiddleware;\nuse Slim\\App;\nuse Slim\\Routing\\RouteCollectorProxy;\nuse WebFramework\\Http\\RouteSet;\n\n// Authenticated (but not linked to account type)\n//\nclass Authenticated implements RouteSet\n{\n    public function __construct(\n        private LoggedInMiddleware $loggedInMiddleware,\n    ) {\n    }\n\n    public function register(App $app): void\n    {\n        $app-&gt;group('', function (RouteCollectorProxy $group) {\n            $group-&gt;get('/', \\App\\Actions\\Main::class);\n            $group-&gt;get('/settings', \\App\\Actions\\Settings::class);\n        })\n            -&gt;add($this-&gt;loggedInMiddleware)\n        ;\n    }\n}\n</code></pre> <p>In this example, the <code>Authenticated</code> route group uses the <code>LoggedInMiddleware</code> to ensure that only authenticated users can access the routes within the group.</p>"},{"location":"sanity-checks/","title":"Sanity Check System","text":"<p>This document provides a guide for developers on the sanity check system in WebFramework. Sanity checks are used to ensure that the application environment and configuration are correct and that the application is ready to run.</p>"},{"location":"sanity-checks/#overview","title":"Overview","text":"<p>The sanity check system in WebFramework is designed to perform various checks on the application environment and configuration. It is managed by the <code>SanityCheckRunner</code> and executed as part of the <code>BootstrapService</code>.</p>"},{"location":"sanity-checks/#when-sanity-checks-are-run","title":"When Sanity Checks Are Run","text":"<p>Sanity checks are typically run during the bootstrap process of the application. They are executed if the <code>runSanityChecks</code> flag is set to <code>true</code> in the <code>BootstrapService</code>. This is usually the case in development and testing environments.</p>"},{"location":"sanity-checks/#debug-environment","title":"Debug Environment","text":"<p>Sanity checks are run by default in debug environments. You can control whether sanity checks are run by setting the <code>runSanityChecks</code> flag in the <code>BootstrapService</code>.</p>"},{"location":"sanity-checks/#production-environment","title":"Production Environment","text":"<p>In a production environment, sanity checks are only run once on each new 'commit' that is seen in the BuildInfo.</p>"},{"location":"sanity-checks/#triggering-sanity-checks-manually","title":"Triggering Sanity Checks Manually","text":"<p>You can manually trigger sanity checks by running the <code>sanity_check.php</code> script. This script initializes the application and executes the <code>SanityCheckTask</code>.</p>"},{"location":"sanity-checks/#example-command","title":"Example Command","text":"<pre><code>php scripts/sanity_check.php\n</code></pre> <p>This command will execute all registered sanity checks and output the results to the console.</p>"},{"location":"sanity-checks/#adding-your-own-sanity-checks","title":"Adding Your Own Sanity Checks","text":"<p>To add your own sanity checks, you need to create a class that implements the <code>SanityCheckModule</code> interface. This interface defines the contract for sanity check modules.</p>"},{"location":"sanity-checks/#example-sanity-check-module","title":"Example Sanity Check Module","text":"<pre><code>&lt;?php\n\nnamespace App\\SanityCheck;\n\nuse WebFramework\\SanityCheck\\SanityCheckBase;\n\nclass CustomSanityCheck extends SanityCheckBase\n{\n    public function performChecks(): bool\n    {\n        // Implement your custom checks here\n        // Return true if all checks pass, false otherwise\n        return true;\n    }\n}\n</code></pre>"},{"location":"sanity-checks/#configuring-sanity-checks","title":"Configuring Sanity Checks","text":"<p>Sanity checks are enabled and configured in the application's configuration file under the <code>sanity_check_modules</code> key. This key contains an associative array with fully qualified class names as keys and their respective configuration arrays as values.</p>"},{"location":"sanity-checks/#example-configuration","title":"Example Configuration","text":"<pre><code>return [\n    // Other configuration settings...\n\n    'sanity_check_modules' =&gt; [\n        \\WebFramework\\SanityCheck\\RequiredCoreConfig::class =&gt; [],\n        \\WebFramework\\SanityCheck\\DatabaseCompatibility::class =&gt; [],\n        \\App\\SanityCheck\\CustomSanityCheck::class =&gt; [],\n    ],\n];\n</code></pre>"},{"location":"sanity-checks/#existing-sanity-check-modules","title":"Existing Sanity Check Modules","text":"<p>Here is a description of the existing sanity check modules and their configuration:</p>"},{"location":"sanity-checks/#requiredcoreconfig","title":"RequiredCoreConfig","text":"<ul> <li>Purpose: Checks for required core configuration options.</li> <li>Configuration: No additional configuration is required.</li> </ul>"},{"location":"sanity-checks/#databasecompatibility","title":"DatabaseCompatibility","text":"<ul> <li>Purpose: Checks for database compatibility, including version checks.</li> <li>Configuration: No additional configuration is required.</li> </ul>"},{"location":"sanity-checks/#requiredauth","title":"RequiredAuth","text":"<ul> <li>Purpose: Checks for the presence of required authentication files.</li> <li>Configuration: An array of filenames to check for.</li> </ul>"},{"location":"sanity-checks/#example","title":"Example","text":"<pre><code>\\WebFramework\\SanityCheck\\RequiredAuth::class =&gt; [\n    'auth_file_1.php',\n    'auth_file_2.php',\n],\n</code></pre>"},{"location":"tasks/","title":"Tasks","text":"<p>This document provides a guide for developers on how to create and run tasks in the WebFramework. Tasks are used to perform specific operations, such as database initialization or updates, and can be executed from the command line.</p>"},{"location":"tasks/#overview","title":"Overview","text":"<p>Tasks in WebFramework implement the <code>Task</code>, which defines a single method, <code>execute()</code>. This method contains the logic for the task. Tasks are executed using the <code>TaskRunner</code>, which sets up the application environment and runs the specified task.</p>"},{"location":"tasks/#creating-custom-tasks","title":"Creating Custom Tasks","text":"<p>To create a custom task, you need to implement the <code>Task</code> and define the <code>execute()</code> method. This method should contain the logic for your task.</p>"},{"location":"tasks/#example-custom-task","title":"Example: Custom Task","text":"<pre><code>&lt;?php\n\nnamespace App\\Task;\n\nuse WebFramework\\Core\\Task;\n\nclass CustomTask implements Task\n{\n    public function execute(): void\n    {\n        // Task logic goes here\n        echo \"Running custom task...\";\n    }\n}\n</code></pre> <p>In this example, the <code>CustomTask</code> class implements the <code>Task</code> and defines the <code>execute()</code> method, which contains the task logic.</p>"},{"location":"tasks/#running-tasks-from-the-command-line","title":"Running Tasks from the Command Line","text":"<p>Tasks can be executed from the command line using PHP scripts. These scripts initialize the <code>TaskRunner</code> and execute the specified task.</p>"},{"location":"tasks/#example-running-a-task","title":"Example: Running a Task","text":"<p>To run a task from the command line, create a script similar to the following:</p> <pre><code>&lt;?php\n\nuse WebFramework\\Core\\TaskRunner;\nuse App\\Task\\CustomTask;\n\nrequire_once __DIR__.'/../vendor/autoload.php';\n\n$taskRunner = new TaskRunner(__DIR__.'/..');\n$taskRunner-&gt;build();\n\n$taskRunner-&gt;execute(CustomTask::class);\n</code></pre> <p>This script initializes the <code>TaskRunner</code>, builds the application environment, and executes the <code>CustomTask</code>.</p>"},{"location":"tasks/#existing-tasks","title":"Existing Tasks","text":"<p>The WebFramework includes several predefined tasks for common operations. Here are the existing tasks and their purposes:</p>"},{"location":"tasks/#slimapptask","title":"SlimAppTask","text":"<ul> <li>Purpose: Initializes and runs the Slim application.</li> <li>Script: <code>htdocs/index.php</code></li> <li>Script: Typically run as part of the web server setup, not directly from the command line.</li> </ul>"},{"location":"tasks/#dbinittask","title":"DbInitTask","text":"<ul> <li>Purpose: Initializes the database schema.</li> <li>Script: <code>scripts/db_init.php</code></li> <li>Usage: Run this script to set up the initial database schema.</li> </ul>"},{"location":"tasks/#dbupdatetask","title":"DbUpdateTask","text":"<ul> <li>Purpose: Updates the database schema to the latest version.</li> <li>Script: <code>scripts/db_update.php</code></li> <li>Usage: Run this script to apply database migrations and update the schema.</li> </ul>"},{"location":"tasks/#dbversiontask","title":"DbVersionTask","text":"<ul> <li>Purpose: Displays the current database version.</li> <li>Script: <code>scripts/db_version.php</code></li> <li>Usage: Run this script to check the current version of the database schema.</li> </ul>"},{"location":"tasks/#sanitychecktask","title":"SanityCheckTask","text":"<ul> <li>Purpose: Runs sanity checks on the application.</li> <li>Script: <code>scripts/sanity_check.php</code></li> <li>Usage: Run this script to perform sanity checks and ensure the application environment is correct.</li> </ul>"},{"location":"templating/","title":"Rendering and Templating","text":"<p>This document provides a guide for developers on how rendering and templating work in the WebFramework. It covers the default renderer, how to create your own action, set up parameters, and pass them to a template.</p>"},{"location":"templating/#overview-of-rendering-in-webframework","title":"Overview of Rendering in WebFramework","text":"<p>The WebFramework uses the <code>RenderService</code> interface to define the contract for rendering services. The default implementation of this interface is the <code>LatteRenderService</code>, which uses the Latte templating engine to render templates.</p>"},{"location":"templating/#default-renderer-latterenderservice","title":"Default Renderer: LatteRenderService","text":"<p>The <code>LatteRenderService</code> is the default renderer in WebFramework. It uses the Latte templating engine to render templates and return responses. Latte is a powerful and secure templating engine for PHP, known for its clean syntax and flexibility.</p>"},{"location":"templating/#key-features-of-latte","title":"Key Features of Latte","text":"<ul> <li>Secure: Automatically escapes output to prevent XSS attacks.</li> <li>Flexible: Supports custom filters and functions.</li> <li>Fast: Compiles templates to PHP code for high performance.</li> </ul> <p>For more information about Latte, visit the Latte Framework website.</p>"},{"location":"templating/#creating-your-own-action","title":"Creating Your Own Action","text":"<p>To create your own action in WebFramework, you need to define a class that handles the request and response. This class will use the <code>RenderService</code> to render a template.</p>"},{"location":"templating/#example-action-helloworldaction","title":"Example Action: HelloWorldAction","text":"<pre><code>&lt;?php\n\nnamespace App\\Actions;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse WebFramework\\Presentation\\RenderService;\n\nclass HelloWorldAction\n{\n    public function __construct(\n        private RenderService $renderService,\n    ) {}\n\n    public function __invoke(Request $request, ResponseInterface $response): ResponseInterface\n    {\n        $params = ['name' =&gt; 'World'];\n\n        return $this-&gt;renderService-&gt;render($request, $response, 'hello-world.latte', $params);\n    }\n}\n</code></pre> <p>In this example, the <code>HelloWorldAction</code> class uses the <code>RenderService</code> to render a template called <code>hello-world.latte</code>, passing a parameter <code>name</code> with the value <code>World</code>.</p>"},{"location":"templating/#setting-up-parameters-and-passing-them-to-a-template","title":"Setting Up Parameters and Passing Them to a Template","text":"<p>Parameters are passed to the template as an associative array. These parameters can be accessed within the template using their keys.</p>"},{"location":"templating/#example-template-hello-worldlatte","title":"Example Template: hello-world.latte","text":"<pre><code>Hello, {$name}!\n</code></pre> <p>In this template, the <code>name</code> parameter is accessed using the <code>{$name}</code> syntax, and the output will be \"Hello, World!\".</p>"},{"location":"translations/","title":"Multi-Lingual Support","text":"<p>This document provides a guide for developers on how to deploy and configure multi-lingual support in an application using the WebFramework. The framework provides a robust translation system that allows you to manage translations for different languages.</p>"},{"location":"translations/#overview","title":"Overview","text":"<p>The WebFramework uses a combination of translation services and loaders to manage translations. The <code>TranslationService</code> is the main service responsible for providing translation functionality, while the <code>FileTranslationLoader</code> is used to load translations from files. This is all handled by the <code>BootstrapService</code>, so you don't have to worry about it.</p>"},{"location":"translations/#setting-up-translations","title":"Setting Up Translations","text":""},{"location":"translations/#step-1-define-translation-files","title":"Step 1: Define Translation Files","text":"<p>Translation files are PHP files that return an associative array of translation keys and their corresponding translations. These files are typically organized by language and category.</p>"},{"location":"translations/#example-translation-file","title":"Example Translation File","text":"<p>Create a file named <code>en.php</code> in your translations directory. For all messages in the WebFramework there is already a default translation in English.You can override default translations by using the same key in your translation file.</p> <pre><code>&lt;?php\n\nreturn [\n    'authenticator' =&gt; [\n        'auth_required_message' =&gt; 'Authentication required. Please login.',\n    ],\n    'change_email' =&gt; [\n        'duplicate' =&gt; 'E-mail address is already in use in another account',\n        'success' =&gt; 'E-mail address changed successfully',\n    ],\n    // Add more categories and translations as needed\n];\n</code></pre>"},{"location":"translations/#step-2-configure-translation-directories","title":"Step 2: Configure Translation Directories","text":"<p>In your configuration file (e.g., <code>config.php</code>), specify the directories where translation files are located. This is done under the <code>translations</code> key.</p> <pre><code>return [\n    // Other configuration settings...\n\n    'translations' =&gt; [\n        'default_language' =&gt; 'en',\n        'directories' =&gt; [\n            'translations', // Directory containing translation files\n        ],\n    ],\n];\n</code></pre> <p>You can override the default language by setting the <code>default_language</code> in your configuration file.</p>"},{"location":"translations/#step-3-use-the-translation-functions","title":"Step 3: Use the Translation Functions","text":"<p>The WebFramework provides helper functions <code>__()</code> and <code>__C()</code> to retrieve translations in your application. These functions use the <code>TranslationService</code> to fetch translations.</p>"},{"location":"translations/#example-usage","title":"Example Usage","text":"<pre><code>// Translate a specific tag within a category\n$message = __('notifications', 'hello_world');\n\n// Get all translations for a specific category\n$genderOptions = __C('genders');\n</code></pre> <p>In this example, the <code>__()</code> function is used to retrieve a specific translation, while the <code>__C()</code> function is used to retrieve all translations for a specific category. This can be useful when you need to retrieve all options for a selection input in your template.</p>"},{"location":"translations/#handling-messages-with-translations","title":"Handling Messages with Translations","text":"<p>The <code>MessageService</code> is used to manage messages in the application, including translating message keys into their corresponding translations.</p>"},{"location":"translations/#adding-messages","title":"Adding Messages","text":"<p>When adding a message, you can specify a translation key instead of a plain text message. The <code>MessageService</code> will automatically translate the key using the <code>TranslationService</code>.</p>"},{"location":"translations/#example","title":"Example","text":"<pre><code>use WebFramework\\Presentation\\MessageService;\n\nclass ExampleAction\n{\n    public function __construct(\n        private MessageService $messageService,\n    ) {}\n\n    public function execute(): void\n    {\n        $this-&gt;messageService-&gt;add('info', 'authenticator.auth_required_message');\n    }\n}\n</code></pre> <p>In this example, the <code>ExampleAction</code> adds a message using a translation key. The <code>MessageService</code> translates the key into the corresponding message.</p>"}]}